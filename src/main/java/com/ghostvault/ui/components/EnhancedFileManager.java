package com.ghostvault.ui.components;

import javafx.application.Platform;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.collections.transformation.FilteredList;
import javafx.collections.transformation.SortedList;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.util.Callback;

import java.io.File;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Enhanced file manager with search, filtering, sorting, and bulk operations
 */
public class EnhancedFileManager extends VBox {
    
    // UI Components
    private TextField searchField;
    private ComboBox<String> fileTypeFilter;
    private ComboBox<String> sortByCombo;
    private CheckBox sortDescending;
    private TableView<FileItem> fileTable;
    private Label statusLabel;
    private ProgressIndicator loadingIndicator;
    private Button selectAllButton;
    private Button deselectAllButton;
    private Button deleteSelectedButton;
    private Button refreshButton;
    
    // Data
    private ObservableList<FileItem> allFiles = FXCollections.observableArrayList();
    private FilteredList<FileItem> filteredFiles;
    private SortedList<FileItem> sortedFiles;
    private File currentDirectory;
    
    // Selection tracking
    private Set<FileItem> selectedFiles = new HashSet<>();
    
    public EnhancedFileManager() {
        initializeComponents();
        setupLayout();
        setupEventHandlers();
        applyStyles();
    }
    
    private void initializeComponents() {
        // Search and filter controls
        searchField = new TextField();
        searchField.setPromptText("Search files...");
        
        fileTypeFilter = new ComboBox<>();
        fileTypeFilter.getItems().addAll(\"All Files\", \"Images\", \"Documents\", \"Videos\", \"Audio\", \"Archives\", \"Code Files\");\n        fileTypeFilter.setValue(\"All Files\");\n        \n        sortByCombo = new ComboBox<>();\n        sortByCombo.getItems().addAll(\"Name\", \"Size\", \"Type\", \"Modified Date\");\n        sortByCombo.setValue(\"Name\");\n        \n        sortDescending = new CheckBox(\"Descending\");\n        \n        // File table\n        fileTable = new TableView<>();\n        setupFileTable();\n        \n        // Status and loading\n        statusLabel = new Label(\"No directory selected\");\n        loadingIndicator = new ProgressIndicator();\n        loadingIndicator.setVisible(false);\n        loadingIndicator.setMaxSize(20, 20);\n        \n        // Bulk operation buttons\n        selectAllButton = new Button(\"Select All\");\n        deselectAllButton = new Button(\"Deselect All\");\n        deleteSelectedButton = new Button(\"Delete Selected\");\n        refreshButton = new Button(\"Refresh\");\n        \n        // Setup filtered and sorted lists\n        filteredFiles = new FilteredList<>(allFiles);\n        sortedFiles = new SortedList<>(filteredFiles);\n        fileTable.setItems(sortedFiles);\n    }\n    \n    private void setupFileTable() {\n        // Selection column with checkboxes\n        TableColumn<FileItem, Boolean> selectColumn = new TableColumn<>(\"\");\n        selectColumn.setPrefWidth(30);\n        selectColumn.setCellValueFactory(new PropertyValueFactory<>(\"selected\"));\n        selectColumn.setCellFactory(new Callback<TableColumn<FileItem, Boolean>, TableCell<FileItem, Boolean>>() {\n            @Override\n            public TableCell<FileItem, Boolean> call(TableColumn<FileItem, Boolean> param) {\n                return new TableCell<FileItem, Boolean>() {\n                    private CheckBox checkBox = new CheckBox();\n                    \n                    {\n                        checkBox.setOnAction(e -> {\n                            FileItem item = getTableRow().getItem();\n                            if (item != null) {\n                                item.setSelected(checkBox.isSelected());\n                                updateSelectedFiles();\n                            }\n                        });\n                    }\n                    \n                    @Override\n                    protected void updateItem(Boolean selected, boolean empty) {\n                        super.updateItem(selected, empty);\n                        if (empty) {\n                            setGraphic(null);\n                        } else {\n                            checkBox.setSelected(selected != null && selected);\n                            setGraphic(checkBox);\n                        }\n                    }\n                };\n            }\n        });\n        \n        // Icon column\n        TableColumn<FileItem, File> iconColumn = new TableColumn<>(\"\");\n        iconColumn.setPrefWidth(40);\n        iconColumn.setCellValueFactory(new PropertyValueFactory<>(\"file\"));\n        iconColumn.setCellFactory(new Callback<TableColumn<FileItem, File>, TableCell<FileItem, File>>() {\n            @Override\n            public TableCell<FileItem, File> call(TableColumn<FileItem, File> param) {\n                return new TableCell<FileItem, File>() {\n                    private ImageView imageView = new ImageView();\n                    \n                    {\n                        imageView.setFitWidth(16);\n                        imageView.setFitHeight(16);\n                        imageView.setPreserveRatio(true);\n                    }\n                    \n                    @Override\n                    protected void updateItem(File file, boolean empty) {\n                        super.updateItem(file, empty);\n                        if (empty || file == null) {\n                            setGraphic(null);\n                        } else {\n                            String iconPath = FileIconProvider.getIconPath(file);\n                            if (iconPath != null) {\n                                try {\n                                    Image icon = new Image(getClass().getResourceAsStream(iconPath));\n                                    imageView.setImage(icon);\n                                    setGraphic(imageView);\n                                } catch (Exception e) {\n                                    setGraphic(null);\n                                }\n                            } else {\n                                setGraphic(null);\n                            }\n                        }\n                    }\n                };\n            }\n        });\n        \n        // Name column\n        TableColumn<FileItem, String> nameColumn = new TableColumn<>(\"Name\");\n        nameColumn.setPrefWidth(200);\n        nameColumn.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\n        \n        // Size column\n        TableColumn<FileItem, Long> sizeColumn = new TableColumn<>(\"Size\");\n        sizeColumn.setPrefWidth(80);\n        sizeColumn.setCellValueFactory(new PropertyValueFactory<>(\"size\"));\n        sizeColumn.setCellFactory(new Callback<TableColumn<FileItem, Long>, TableCell<FileItem, Long>>() {\n            @Override\n            public TableCell<FileItem, Long> call(TableColumn<FileItem, Long> param) {\n                return new TableCell<FileItem, Long>() {\n                    @Override\n                    protected void updateItem(Long size, boolean empty) {\n                        super.updateItem(size, empty);\n                        if (empty || size == null) {\n                            setText(null);\n                        } else {\n                            setText(formatFileSize(size));\n                        }\n                    }\n                };\n            }\n        });\n        \n        // Type column\n        TableColumn<FileItem, String> typeColumn = new TableColumn<>(\"Type\");\n        typeColumn.setPrefWidth(100);\n        typeColumn.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\n        \n        // Modified date column\n        TableColumn<FileItem, LocalDateTime> modifiedColumn = new TableColumn<>(\"Modified\");\n        modifiedColumn.setPrefWidth(120);\n        modifiedColumn.setCellValueFactory(new PropertyValueFactory<>(\"modified\"));\n        modifiedColumn.setCellFactory(new Callback<TableColumn<FileItem, LocalDateTime>, TableCell<FileItem, LocalDateTime>>() {\n            @Override\n            public TableCell<FileItem, LocalDateTime> call(TableColumn<FileItem, LocalDateTime> param) {\n                return new TableCell<FileItem, LocalDateTime>() {\n                    @Override\n                    protected void updateItem(LocalDateTime dateTime, boolean empty) {\n                        super.updateItem(dateTime, empty);\n                        if (empty || dateTime == null) {\n                            setText(null);\n                        } else {\n                            setText(dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd, yyyy HH:mm\")));\n                        }\n                    }\n                };\n            }\n        });\n        \n        fileTable.getColumns().addAll(selectColumn, iconColumn, nameColumn, sizeColumn, typeColumn, modifiedColumn);\n        \n        // Enable multiple selection\n        fileTable.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n        \n        // Row double-click handler\n        fileTable.setRowFactory(tv -> {\n            TableRow<FileItem> row = new TableRow<>();\n            row.setOnMouseClicked(event -> {\n                if (event.getClickCount() == 2 && !row.isEmpty()) {\n                    FileItem item = row.getItem();\n                    if (item.getFile().isDirectory()) {\n                        loadDirectory(item.getFile());\n                    } else {\n                        // Open file for preview\n                        openFileForPreview(item.getFile());\n                    }\n                }\n            });\n            return row;\n        });\n    }\n    \n    private void setupLayout() {\n        // Search and filter bar\n        HBox searchBar = new HBox(10);\n        searchBar.setPadding(new Insets(10));\n        searchBar.setAlignment(Pos.CENTER_LEFT);\n        \n        Label searchLabel = new Label(\"Search:\");\n        Label filterLabel = new Label(\"Filter:\");\n        Label sortLabel = new Label(\"Sort by:\");\n        \n        searchBar.getChildren().addAll(\n            searchLabel, searchField,\n            new Separator(),\n            filterLabel, fileTypeFilter,\n            new Separator(),\n            sortLabel, sortByCombo, sortDescending\n        );\n        \n        HBox.setHgrow(searchField, Priority.ALWAYS);\n        \n        // Bulk operations bar\n        HBox bulkOpsBar = new HBox(10);\n        bulkOpsBar.setPadding(new Insets(5, 10, 5, 10));\n        bulkOpsBar.setAlignment(Pos.CENTER_LEFT);\n        \n        bulkOpsBar.getChildren().addAll(\n            selectAllButton, deselectAllButton,\n            new Separator(),\n            deleteSelectedButton,\n            new Separator(),\n            refreshButton\n        );\n        \n        // Status bar\n        HBox statusBar = new HBox(10);\n        statusBar.setPadding(new Insets(5, 10, 10, 10));\n        statusBar.setAlignment(Pos.CENTER_LEFT);\n        statusBar.getChildren().addAll(statusLabel, loadingIndicator);\n        \n        // Main layout\n        this.getChildren().addAll(searchBar, bulkOpsBar, fileTable, statusBar);\n        VBox.setVgrow(fileTable, Priority.ALWAYS);\n    }\n    \n    private void setupEventHandlers() {\n        // Search field\n        searchField.textProperty().addListener((obs, oldText, newText) -> {\n            updateFilter();\n        });\n        \n        // File type filter\n        fileTypeFilter.valueProperty().addListener((obs, oldValue, newValue) -> {\n            updateFilter();\n        });\n        \n        // Sort controls\n        sortByCombo.valueProperty().addListener((obs, oldValue, newValue) -> {\n            updateSort();\n        });\n        \n        sortDescending.selectedProperty().addListener((obs, oldValue, newValue) -> {\n            updateSort();\n        });\n        \n        // Bulk operation buttons\n        selectAllButton.setOnAction(e -> selectAll());\n        deselectAllButton.setOnAction(e -> deselectAll());\n        deleteSelectedButton.setOnAction(e -> deleteSelected());\n        refreshButton.setOnAction(e -> refreshDirectory());\n    }\n    \n    private void applyStyles() {\n        this.getStyleClass().add(\"enhanced-file-manager\");\n        fileTable.getStyleClass().add(\"file-table\");\n        searchField.getStyleClass().add(\"search-field\");\n        \n        // Button styling\n        selectAllButton.getStyleClass().add(\"bulk-operation-button\");\n        deselectAllButton.getStyleClass().add(\"bulk-operation-button\");\n        deleteSelectedButton.getStyleClass().addAll(\"bulk-operation-button\", \"danger-button\");\n        refreshButton.getStyleClass().add(\"bulk-operation-button\");\n    }\n    \n    /**\n     * Load files from a directory\n     */\n    public void loadDirectory(File directory) {\n        if (directory == null || !directory.exists() || !directory.isDirectory()) {\n            statusLabel.setText(\"Invalid directory\");\n            return;\n        }\n        \n        this.currentDirectory = directory;\n        showLoading(true);\n        statusLabel.setText(\"Loading directory...\");\n        \n        Task<List<FileItem>> loadTask = new Task<List<FileItem>>() {\n            @Override\n            protected List<FileItem> call() throws Exception {\n                File[] files = directory.listFiles();\n                if (files == null) {\n                    return new ArrayList<>();\n                }\n                \n                return Arrays.stream(files)\n                    .map(FileItem::new)\n                    .collect(Collectors.toList());\n            }\n            \n            @Override\n            protected void succeeded() {\n                Platform.runLater(() -> {\n                    allFiles.setAll(getValue());\n                    updateStatus();\n                    showLoading(false);\n                });\n            }\n            \n            @Override\n            protected void failed() {\n                Platform.runLater(() -> {\n                    statusLabel.setText(\"Failed to load directory: \" + getException().getMessage());\n                    showLoading(false);\n                });\n            }\n        };\n        \n        Thread loadThread = new Thread(loadTask);\n        loadThread.setDaemon(true);\n        loadThread.start();\n    }\n    \n    private void updateFilter() {\n        String searchText = searchField.getText().toLowerCase();\n        String fileTypeFilter = this.fileTypeFilter.getValue();\n        \n        Predicate<FileItem> searchPredicate = item -> {\n            if (searchText.isEmpty()) {\n                return true;\n            }\n            return item.getName().toLowerCase().contains(searchText);\n        };\n        \n        Predicate<FileItem> typePredicate = item -> {\n            if (\"All Files\".equals(fileTypeFilter)) {\n                return true;\n            }\n            \n            String category = FileIconProvider.getFileTypeCategory(item.getFile());\n            switch (fileTypeFilter) {\n                case \"Images\": return \"Image\".equals(category);\n                case \"Documents\": return \"Document\".equals(category);\n                case \"Videos\": return \"Video\".equals(category);\n                case \"Audio\": return \"Audio\".equals(category);\n                case \"Archives\": return \"Archive\".equals(category);\n                case \"Code Files\": return \"Code\".equals(category);\n                default: return true;\n            }\n        };\n        \n        filteredFiles.setPredicate(searchPredicate.and(typePredicate));\n        updateStatus();\n    }\n    \n    private void updateSort() {\n        String sortBy = sortByCombo.getValue();\n        boolean descending = sortDescending.isSelected();\n        \n        Comparator<FileItem> comparator;\n        \n        switch (sortBy) {\n            case \"Size\":\n                comparator = Comparator.comparing(FileItem::getSize);\n                break;\n            case \"Type\":\n                comparator = Comparator.comparing(FileItem::getType);\n                break;\n            case \"Modified Date\":\n                comparator = Comparator.comparing(FileItem::getModified);\n                break;\n            default: // Name\n                comparator = Comparator.comparing(FileItem::getName, String.CASE_INSENSITIVE_ORDER);\n                break;\n        }\n        \n        if (descending) {\n            comparator = comparator.reversed();\n        }\n        \n        sortedFiles.setComparator(comparator);\n    }\n    \n    private void selectAll() {\n        for (FileItem item : filteredFiles) {\n            item.setSelected(true);\n        }\n        fileTable.refresh();\n        updateSelectedFiles();\n    }\n    \n    private void deselectAll() {\n        for (FileItem item : allFiles) {\n            item.setSelected(false);\n        }\n        fileTable.refresh();\n        updateSelectedFiles();\n    }\n    \n    private void deleteSelected() {\n        List<FileItem> selected = allFiles.stream()\n            .filter(FileItem::isSelected)\n            .collect(Collectors.toList());\n        \n        if (selected.isEmpty()) {\n            showAlert(\"No files selected\", \"Please select files to delete.\");\n            return;\n        }\n        \n        // Confirmation dialog\n        Alert confirmation = new Alert(Alert.AlertType.CONFIRMATION);\n        confirmation.setTitle(\"Confirm Deletion\");\n        confirmation.setHeaderText(\"Delete \" + selected.size() + \" file(s)?\");\n        confirmation.setContentText(\"This action cannot be undone.\");\n        \n        Optional<ButtonType> result = confirmation.showAndWait();\n        if (result.isPresent() && result.get() == ButtonType.OK) {\n            performBulkDelete(selected);\n        }\n    }\n    \n    private void performBulkDelete(List<FileItem> itemsToDelete) {\n        showLoading(true);\n        statusLabel.setText(\"Deleting files...\");\n        \n        Task<Integer> deleteTask = new Task<Integer>() {\n            @Override\n            protected Integer call() throws Exception {\n                int deletedCount = 0;\n                for (FileItem item : itemsToDelete) {\n                    if (item.getFile().delete()) {\n                        deletedCount++;\n                    }\n                }\n                return deletedCount;\n            }\n            \n            @Override\n            protected void succeeded() {\n                Platform.runLater(() -> {\n                    int deletedCount = getValue();\n                    refreshDirectory();\n                    statusLabel.setText(deletedCount + \" file(s) deleted successfully\");\n                    showLoading(false);\n                });\n            }\n            \n            @Override\n            protected void failed() {\n                Platform.runLater(() -> {\n                    statusLabel.setText(\"Failed to delete files: \" + getException().getMessage());\n                    showLoading(false);\n                });\n            }\n        };\n        \n        Thread deleteThread = new Thread(deleteTask);\n        deleteThread.setDaemon(true);\n        deleteThread.start();\n    }\n    \n    private void refreshDirectory() {\n        if (currentDirectory != null) {\n            loadDirectory(currentDirectory);\n        }\n    }\n    \n    private void updateSelectedFiles() {\n        selectedFiles.clear();\n        selectedFiles.addAll(allFiles.stream()\n            .filter(FileItem::isSelected)\n            .collect(Collectors.toSet()));\n        \n        deleteSelectedButton.setDisable(selectedFiles.isEmpty());\n    }\n    \n    private void updateStatus() {\n        int totalFiles = allFiles.size();\n        int visibleFiles = filteredFiles.size();\n        int selectedCount = selectedFiles.size();\n        \n        String status = String.format(\"%d files\", totalFiles);\n        if (visibleFiles != totalFiles) {\n            status += String.format(\" (%d shown)\", visibleFiles);\n        }\n        if (selectedCount > 0) {\n            status += String.format(\", %d selected\", selectedCount);\n        }\n        \n        statusLabel.setText(status);\n    }\n    \n    private void showLoading(boolean show) {\n        loadingIndicator.setVisible(show);\n        fileTable.setDisable(show);\n    }\n    \n    private void showAlert(String title, String message) {\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n        alert.setTitle(title);\n        alert.setHeaderText(null);\n        alert.setContentText(message);\n        alert.showAndWait();\n    }\n    \n    private void openFileForPreview(File file) {\n        // This would trigger file preview in the main application\n        // For now, just show an info dialog\n        showAlert(\"File Preview\", \"Opening \" + file.getName() + \" for preview...\");\n    }\n    \n    private String formatFileSize(long bytes) {\n        if (bytes < 1024) return bytes + \" B\";\n        if (bytes < 1024 * 1024) return new DecimalFormat(\"#.# KB\").format(bytes / 1024.0);\n        if (bytes < 1024 * 1024 * 1024) return new DecimalFormat(\"#.# MB\").format(bytes / (1024.0 * 1024.0));\n        return new DecimalFormat(\"#.# GB\").format(bytes / (1024.0 * 1024.0 * 1024.0));\n    }\n    \n    /**\n     * Get current directory\n     */\n    public File getCurrentDirectory() {\n        return currentDirectory;\n    }\n    \n    /**\n     * Get selected files\n     */\n    public Set<FileItem> getSelectedFiles() {\n        return new HashSet<>(selectedFiles);\n    }\n    \n    /**\n     * File item class for table display\n     */\n    public static class FileItem {\n        private final SimpleObjectProperty<File> file;\n        private final SimpleStringProperty name;\n        private final SimpleObjectProperty<Long> size;\n        private final SimpleStringProperty type;\n        private final SimpleObjectProperty<LocalDateTime> modified;\n        private boolean selected = false;\n        \n        public FileItem(File file) {\n            this.file = new SimpleObjectProperty<>(file);\n            this.name = new SimpleStringProperty(file.getName());\n            this.size = new SimpleObjectProperty<>(file.length());\n            this.type = new SimpleStringProperty(getFileType(file));\n            this.modified = new SimpleObjectProperty<>(\n                LocalDateTime.ofInstant(\n                    java.time.Instant.ofEpochMilli(file.lastModified()),\n                    ZoneId.systemDefault()\n                )\n            );\n        }\n        \n        private String getFileType(File file) {\n            if (file.isDirectory()) {\n                return \"Folder\";\n            }\n            \n            String name = file.getName();\n            int lastDot = name.lastIndexOf('.');\n            if (lastDot > 0) {\n                return name.substring(lastDot + 1).toUpperCase();\n            }\n            return \"File\";\n        }\n        \n        // Getters and setters\n        public File getFile() { return file.get(); }\n        public String getName() { return name.get(); }\n        public Long getSize() { return size.get(); }\n        public String getType() { return type.get(); }\n        public LocalDateTime getModified() { return modified.get(); }\n        public boolean isSelected() { return selected; }\n        public void setSelected(boolean selected) { this.selected = selected; }\n        \n        // Property getters for TableView\n        public SimpleObjectProperty<File> fileProperty() { return file; }\n        public SimpleStringProperty nameProperty() { return name; }\n        public SimpleObjectProperty<Long> sizeProperty() { return size; }\n        public SimpleStringProperty typeProperty() { return type; }\n        public SimpleObjectProperty<LocalDateTime> modifiedProperty() { return modified; }\n    }\n}"