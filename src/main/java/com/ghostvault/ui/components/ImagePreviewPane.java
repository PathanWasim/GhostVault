package com.ghostvault.ui.components;

import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.ScrollEvent;
import javafx.scene.layout.*;
import javafx.scene.transform.Scale;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.text.DecimalFormat;

/**
 * Advanced image preview component with zoom, pan, and metadata display
 */
public class ImagePreviewPane extends VBox {
    
    // UI Components
    private HBox headerBar;
    private Label fileNameLabel;
    private Label imageSizeLabel;
    private Label zoomLabel;
    private Button zoomInButton;
    private Button zoomOutButton;
    private Button zoomFitButton;
    private Button zoomActualButton;
    private Button rotateLeftButton;
    private Button rotateRightButton;
    private ScrollPane imageScrollPane;
    private StackPane imageContainer;
    private ImageView imageView;
    private ProgressIndicator loadingIndicator;
    private Label statusLabel;
    private VBox metadataPane;
    
    // State
    private File currentFile;
    private Image currentImage;
    private double zoomFactor = 1.0;
    private double rotation = 0.0;
    private boolean fitToWindow = true;
    
    // Zoom settings
    private static final double MIN_ZOOM = 0.1;
    private static final double MAX_ZOOM = 10.0;
    private static final double ZOOM_STEP = 0.1;
    
    // Supported formats
    private static final String[] SUPPORTED_FORMATS = {\n        \".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".svg\", \".webp\", \".tiff\", \".tif\"\n    };\n    \n    public ImagePreviewPane() {\n        initializeComponents();\n        setupLayout();\n        setupStyling();\n        setupEventHandlers();\n    }\n    \n    /**\n     * Initialize all components\n     */\n    private void initializeComponents() {\n        // Header bar\n        headerBar = new HBox(8);\n        headerBar.setAlignment(Pos.CENTER_LEFT);\n        headerBar.getStyleClass().add(\"image-preview-header\");\n        \n        // File info\n        fileNameLabel = new Label(\"No image selected\");\n        fileNameLabel.getStyleClass().add(\"image-file-name\");\n        \n        imageSizeLabel = new Label(\"\");\n        imageSizeLabel.getStyleClass().add(\"image-size-label\");\n        \n        zoomLabel = new Label(\"100%\");\n        zoomLabel.getStyleClass().add(\"zoom-label\");\n        \n        // Zoom controls\n        zoomInButton = new Button(\"🔍+\");\n        zoomInButton.setTooltip(new Tooltip(\"Zoom in\"));\n        zoomInButton.getStyleClass().addAll(\"button\", \"icon\", \"zoom-button\");\n        \n        zoomOutButton = new Button(\"🔍-\");\n        zoomOutButton.setTooltip(new Tooltip(\"Zoom out\"));\n        zoomOutButton.getStyleClass().addAll(\"button\", \"icon\", \"zoom-button\");\n        \n        zoomFitButton = new Button(\"📐\");\n        zoomFitButton.setTooltip(new Tooltip(\"Fit to window\"));\n        zoomFitButton.getStyleClass().addAll(\"button\", \"icon\", \"zoom-button\");\n        \n        zoomActualButton = new Button(\"1:1\");\n        zoomActualButton.setTooltip(new Tooltip(\"Actual size\"));\n        zoomActualButton.getStyleClass().addAll(\"button\", \"text\", \"zoom-button\");\n        \n        // Rotation controls\n        rotateLeftButton = new Button(\"↺\");\n        rotateLeftButton.setTooltip(new Tooltip(\"Rotate left\"));\n        rotateLeftButton.getStyleClass().addAll(\"button\", \"icon\", \"rotate-button\");\n        \n        rotateRightButton = new Button(\"↻\");\n        rotateRightButton.setTooltip(new Tooltip(\"Rotate right\"));\n        rotateRightButton.getStyleClass().addAll(\"button\", \"icon\", \"rotate-button\");\n        \n        // Spacer\n        Region spacer = new Region();\n        HBox.setHgrow(spacer, Priority.ALWAYS);\n        \n        headerBar.getChildren().addAll(\n            fileNameLabel, imageSizeLabel, spacer, zoomLabel,\n            zoomInButton, zoomOutButton, zoomFitButton, zoomActualButton,\n            new Separator(), rotateLeftButton, rotateRightButton\n        );\n        \n        // Image display area\n        imageView = new ImageView();\n        imageView.setPreserveRatio(true);\n        imageView.setSmooth(true);\n        imageView.getStyleClass().add(\"image-view\");\n        \n        imageContainer = new StackPane();\n        imageContainer.getChildren().add(imageView);\n        imageContainer.getStyleClass().add(\"image-container\");\n        \n        imageScrollPane = new ScrollPane();\n        imageScrollPane.setContent(imageContainer);\n        imageScrollPane.getStyleClass().add(\"image-scroll-pane\");\n        imageScrollPane.setFitToWidth(true);\n        imageScrollPane.setFitToHeight(true);\n        imageScrollPane.setPannable(true);\n        \n        // Loading indicator\n        loadingIndicator = new ProgressIndicator();\n        loadingIndicator.getStyleClass().add(\"image-loading-indicator\");\n        loadingIndicator.setVisible(false);\n        \n        // Status label\n        statusLabel = new Label(\"Ready\");\n        statusLabel.getStyleClass().add(\"image-status-label\");\n        \n        // Metadata pane\n        metadataPane = new VBox(4);\n        metadataPane.getStyleClass().add(\"image-metadata-pane\");\n        metadataPane.setPadding(new Insets(8));\n        metadataPane.setVisible(false);\n        \n        this.getChildren().addAll(headerBar, imageScrollPane, metadataPane, statusLabel);\n    }\n    \n    /**\n     * Setup layout properties\n     */\n    private void setupLayout() {\n        this.setSpacing(0);\n        this.setPadding(new Insets(0));\n        VBox.setVgrow(imageScrollPane, Priority.ALWAYS);\n    }\n    \n    /**\n     * Setup component styling\n     */\n    private void setupStyling() {\n        this.getStyleClass().add(\"image-preview-pane\");\n    }\n    \n    /**\n     * Setup event handlers\n     */\n    private void setupEventHandlers() {\n        // Zoom controls\n        zoomInButton.setOnAction(e -> zoomIn());\n        zoomOutButton.setOnAction(e -> zoomOut());\n        zoomFitButton.setOnAction(e -> fitToWindow());\n        zoomActualButton.setOnAction(e -> actualSize());\n        \n        // Rotation controls\n        rotateLeftButton.setOnAction(e -> rotateLeft());\n        rotateRightButton.setOnAction(e -> rotateRight());\n        \n        // Mouse wheel zoom\n        imageScrollPane.setOnScroll(this::handleScrollZoom);\n        \n        // Double-click to fit/actual size toggle\n        imageView.setOnMouseClicked(e -> {\n            if (e.getClickCount() == 2) {\n                if (fitToWindow) {\n                    actualSize();\n                } else {\n                    fitToWindow();\n                }\n            }\n        });\n    }\n    \n    /**\n     * Load and display an image file\n     */\n    public void loadImage(File file) {\n        if (file == null || !file.exists() || !file.isFile()) {\n            showError(\"Invalid image file\");\n            return;\n        }\n        \n        if (!isImageFile(file)) {\n            showError(\"Unsupported image format\");\n            return;\n        }\n        \n        currentFile = file;\n        \n        // Update UI\n        fileNameLabel.setText(file.getName());\n        \n        // Show loading\n        showLoading(\"Loading image...\");\n        \n        // Load image in background\n        Task<Image> loadTask = new Task<Image>() {\n            @Override\n            protected Image call() throws Exception {\n                try (FileInputStream fis = new FileInputStream(file)) {\n                    return new Image(fis.toURI().toString());\n                } catch (IOException e) {\n                    throw new RuntimeException(\"Failed to load image: \" + e.getMessage());\n                }\n            }\n            \n            @Override\n            protected void succeeded() {\n                Platform.runLater(() -> {\n                    currentImage = getValue();\n                    displayImage();\n                    hideLoading();\n                    updateMetadata();\n                    statusLabel.setText(\"Image loaded successfully\");\n                });\n            }\n            \n            @Override\n            protected void failed() {\n                Platform.runLater(() -> {\n                    showError(\"Failed to load image: \" + getException().getMessage());\n                    hideLoading();\n                });\n            }\n        };\n        \n        Thread loadThread = new Thread(loadTask);\n        loadThread.setDaemon(true);\n        loadThread.start();\n    }\n    \n    /**\n     * Display the loaded image\n     */\n    private void displayImage() {\n        if (currentImage == null) {\n            return;\n        }\n        \n        imageView.setImage(currentImage);\n        \n        // Update size label\n        imageSizeLabel.setText(String.format(\"%.0f × %.0f px\", \n            currentImage.getWidth(), currentImage.getHeight()));\n        \n        // Reset transformations\n        zoomFactor = 1.0;\n        rotation = 0.0;\n        fitToWindow = true;\n        \n        // Fit to window by default\n        fitToWindow();\n    }\n    \n    /**\n     * Check if file is a supported image format\n     */\n    private boolean isImageFile(File file) {\n        String fileName = file.getName().toLowerCase();\n        for (String format : SUPPORTED_FORMATS) {\n            if (fileName.endsWith(format)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    /**\n     * Zoom in\n     */\n    private void zoomIn() {\n        if (zoomFactor < MAX_ZOOM) {\n            zoomFactor = Math.min(MAX_ZOOM, zoomFactor + ZOOM_STEP);\n            applyZoom();\n            fitToWindow = false;\n        }\n    }\n    \n    /**\n     * Zoom out\n     */\n    private void zoomOut() {\n        if (zoomFactor > MIN_ZOOM) {\n            zoomFactor = Math.max(MIN_ZOOM, zoomFactor - ZOOM_STEP);\n            applyZoom();\n            fitToWindow = false;\n        }\n    }\n    \n    /**\n     * Fit image to window\n     */\n    private void fitToWindow() {\n        if (currentImage == null) {\n            return;\n        }\n        \n        double containerWidth = imageScrollPane.getWidth() - 20; // Account for scrollbars\n        double containerHeight = imageScrollPane.getHeight() - 20;\n        \n        if (containerWidth <= 0 || containerHeight <= 0) {\n            // Container not ready, try again later\n            Platform.runLater(this::fitToWindow);\n            return;\n        }\n        \n        double imageWidth = currentImage.getWidth();\n        double imageHeight = currentImage.getHeight();\n        \n        double scaleX = containerWidth / imageWidth;\n        double scaleY = containerHeight / imageHeight;\n        \n        zoomFactor = Math.min(scaleX, scaleY);\n        zoomFactor = Math.max(MIN_ZOOM, Math.min(MAX_ZOOM, zoomFactor));\n        \n        applyZoom();\n        fitToWindow = true;\n    }\n    \n    /**\n     * Show image at actual size (100%)\n     */\n    private void actualSize() {\n        zoomFactor = 1.0;\n        applyZoom();\n        fitToWindow = false;\n    }\n    \n    /**\n     * Apply current zoom factor\n     */\n    private void applyZoom() {\n        if (imageView.getImage() == null) {\n            return;\n        }\n        \n        double imageWidth = currentImage.getWidth() * zoomFactor;\n        double imageHeight = currentImage.getHeight() * zoomFactor;\n        \n        imageView.setFitWidth(imageWidth);\n        imageView.setFitHeight(imageHeight);\n        \n        // Update zoom label\n        DecimalFormat df = new DecimalFormat(\"#\");\n        zoomLabel.setText(df.format(zoomFactor * 100) + \"%\");\n        \n        // Update button states\n        zoomInButton.setDisable(zoomFactor >= MAX_ZOOM);\n        zoomOutButton.setDisable(zoomFactor <= MIN_ZOOM);\n    }\n    \n    /**\n     * Rotate image left (counter-clockwise)\n     */\n    private void rotateLeft() {\n        rotation -= 90;\n        if (rotation < 0) {\n            rotation += 360;\n        }\n        applyRotation();\n    }\n    \n    /**\n     * Rotate image right (clockwise)\n     */\n    private void rotateRight() {\n        rotation += 90;\n        if (rotation >= 360) {\n            rotation -= 360;\n        }\n        applyRotation();\n    }\n    \n    /**\n     * Apply current rotation\n     */\n    private void applyRotation() {\n        imageView.setRotate(rotation);\n    }\n    \n    /**\n     * Handle mouse wheel zoom\n     */\n    private void handleScrollZoom(ScrollEvent event) {\n        if (event.isControlDown()) {\n            event.consume();\n            \n            double deltaY = event.getDeltaY();\n            if (deltaY > 0) {\n                zoomIn();\n            } else {\n                zoomOut();\n            }\n        }\n    }\n    \n    /**\n     * Update image metadata display\n     */\n    private void updateMetadata() {\n        if (currentImage == null || currentFile == null) {\n            metadataPane.setVisible(false);\n            return;\n        }\n        \n        metadataPane.getChildren().clear();\n        \n        // File information\n        addMetadataRow(\"File Name:\", currentFile.getName());\n        addMetadataRow(\"File Size:\", formatFileSize(currentFile.length()));\n        addMetadataRow(\"Dimensions:\", String.format(\"%.0f × %.0f pixels\", \n            currentImage.getWidth(), currentImage.getHeight()));\n        \n        // Calculate aspect ratio\n        double aspectRatio = currentImage.getWidth() / currentImage.getHeight();\n        addMetadataRow(\"Aspect Ratio:\", String.format(\"%.2f:1\", aspectRatio));\n        \n        // File format\n        String extension = getFileExtension(currentFile.getName());\n        addMetadataRow(\"Format:\", extension.toUpperCase());\n        \n        metadataPane.setVisible(true);\n    }\n    \n    /**\n     * Add a metadata row\n     */\n    private void addMetadataRow(String label, String value) {\n        HBox row = new HBox(8);\n        row.setAlignment(Pos.CENTER_LEFT);\n        \n        Label labelControl = new Label(label);\n        labelControl.getStyleClass().add(\"metadata-label\");\n        labelControl.setPrefWidth(100);\n        \n        Label valueControl = new Label(value);\n        valueControl.getStyleClass().add(\"metadata-value\");\n        \n        row.getChildren().addAll(labelControl, valueControl);\n        metadataPane.getChildren().add(row);\n    }\n    \n    /**\n     * Format file size for display\n     */\n    private String formatFileSize(long bytes) {\n        if (bytes < 1024) {\n            return bytes + \" B\";\n        } else if (bytes < 1024 * 1024) {\n            return String.format(\"%.1f KB\", bytes / 1024.0);\n        } else if (bytes < 1024 * 1024 * 1024) {\n            return String.format(\"%.1f MB\", bytes / (1024.0 * 1024.0));\n        } else {\n            return String.format(\"%.1f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n        }\n    }\n    \n    /**\n     * Get file extension\n     */\n    private String getFileExtension(String fileName) {\n        int lastDot = fileName.lastIndexOf('.');\n        if (lastDot > 0 && lastDot < fileName.length() - 1) {\n            return fileName.substring(lastDot + 1);\n        }\n        return \"\";\n    }\n    \n    /**\n     * Show loading indicator\n     */\n    private void showLoading(String message) {\n        statusLabel.setText(message);\n        loadingIndicator.setVisible(true);\n        imageView.setImage(null);\n        metadataPane.setVisible(false);\n    }\n    \n    /**\n     * Hide loading indicator\n     */\n    private void hideLoading() {\n        loadingIndicator.setVisible(false);\n    }\n    \n    /**\n     * Show error message\n     */\n    private void showError(String message) {\n        statusLabel.setText(\"Error: \" + message);\n        imageView.setImage(null);\n        metadataPane.setVisible(false);\n        imageSizeLabel.setText(\"\");\n        zoomLabel.setText(\"0%\");\n    }\n    \n    // Getters and Setters\n    \n    public File getCurrentFile() {\n        return currentFile;\n    }\n    \n    public Image getCurrentImage() {\n        return currentImage;\n    }\n    \n    public double getZoomFactor() {\n        return zoomFactor;\n    }\n    \n    public double getRotation() {\n        return rotation;\n    }\n    \n    public boolean isFitToWindow() {\n        return fitToWindow;\n    }\n    \n    /**\n     * Toggle metadata pane visibility\n     */\n    public void toggleMetadata() {\n        metadataPane.setVisible(!metadataPane.isVisible());\n    }\n    \n    /**\n     * Check if the given file is supported\n     */\n    public static boolean isSupported(File file) {\n        if (file == null || !file.isFile()) {\n            return false;\n        }\n        \n        String fileName = file.getName().toLowerCase();\n        for (String format : SUPPORTED_FORMATS) {\n            if (fileName.endsWith(format)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}"