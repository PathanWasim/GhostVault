package com.ghostvault.ui.components;

import javafx.application.Platform;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.*;
import javafx.scene.layout.*;
import javafx.scene.text.Text;
import javafx.scene.text.TextFlow;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Advanced code preview component with syntax highlighting and line numbers
 */
public class CodePreviewPane extends VBox {
    
    // UI Components
    private HBox headerBar;
    private Label fileNameLabel;
    private Label languageLabel;
    private ComboBox<String> themeSelector;
    private Button copyButton;
    private Button wrapToggleButton;
    private ScrollPane scrollPane;
    private HBox contentContainer;
    private VBox lineNumbersPane;
    private TextFlow codeTextFlow;
    private ProgressIndicator loadingIndicator;
    private Label statusLabel;
    
    // State
    private File currentFile;
    private String currentLanguage;
    private boolean lineWrapEnabled = false;
    private boolean showLineNumbers = true;
    private String currentTheme = "dark";
    private List<String> codeLines = new ArrayList<>();
    
    // Syntax highlighting patterns
    private Map<String, Map<String, Pattern>> syntaxPatterns = new HashMap<>();
    
    public CodePreviewPane() {
        initializeComponents();
        setupLayout();
        setupStyling();
        setupEventHandlers();
        initializeSyntaxPatterns();
    }
    
    /**
     * Initialize all components
     */
    private void initializeComponents() {
        // Header bar
        headerBar = new HBox(8);
        headerBar.setAlignment(Pos.CENTER_LEFT);
        headerBar.getStyleClass().add("code-preview-header");
        
        // File info
        fileNameLabel = new Label("No file selected");
        fileNameLabel.getStyleClass().add("code-file-name");
        
        languageLabel = new Label("");
        languageLabel.getStyleClass().add("code-language-badge");
        
        // Controls
        themeSelector = new ComboBox<>();
        themeSelector.getItems().addAll("Dark", "Light", "High Contrast");
        themeSelector.setValue("Dark");
        themeSelector.getStyleClass().add("theme-selector");
        
        copyButton = new Button("📋");
        copyButton.setTooltip(new Tooltip("Copy code to clipboard"));
        copyButton.getStyleClass().addAll("button", "icon", "copy-button");
        
        wrapToggleButton = new Button("↩️");
        wrapToggleButton.setTooltip(new Tooltip("Toggle line wrap"));
        wrapToggleButton.getStyleClass().addAll("button", "icon", "wrap-toggle-button");
        
        // Spacer
        Region spacer = new Region();
        HBox.setHgrow(spacer, Priority.ALWAYS);
        
        headerBar.getChildren().addAll(\n            fileNameLabel, languageLabel, spacer, themeSelector, copyButton, wrapToggleButton\n        );\n        \n        // Content area\n        contentContainer = new HBox();\n        contentContainer.getStyleClass().add(\"code-content-container\");\n        \n        // Line numbers pane\n        lineNumbersPane = new VBox();\n        lineNumbersPane.getStyleClass().add(\"line-numbers-pane\");\n        lineNumbersPane.setPrefWidth(50);\n        lineNumbersPane.setMinWidth(50);\n        \n        // Code text flow\n        codeTextFlow = new TextFlow();\n        codeTextFlow.getStyleClass().add(\"code-text-flow\");\n        \n        // Scroll pane\n        scrollPane = new ScrollPane();\n        scrollPane.setContent(contentContainer);\n        scrollPane.getStyleClass().add(\"code-scroll-pane\");\n        scrollPane.setFitToWidth(true);\n        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);\n        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.AS_NEEDED);\n        \n        contentContainer.getChildren().addAll(lineNumbersPane, codeTextFlow);\n        \n        // Loading indicator\n        loadingIndicator = new ProgressIndicator();\n        loadingIndicator.getStyleClass().add(\"code-loading-indicator\");\n        loadingIndicator.setVisible(false);\n        \n        // Status label\n        statusLabel = new Label(\"Ready\");\n        statusLabel.getStyleClass().add(\"code-status-label\");\n        \n        this.getChildren().addAll(headerBar, scrollPane, statusLabel);\n    }\n    \n    /**\n     * Setup layout properties\n     */\n    private void setupLayout() {\n        this.setSpacing(0);\n        this.setPadding(new Insets(0));\n        VBox.setVgrow(scrollPane, Priority.ALWAYS);\n    }\n    \n    /**\n     * Setup component styling\n     */\n    private void setupStyling() {\n        this.getStyleClass().add(\"code-preview-pane\");\n    }\n    \n    /**\n     * Setup event handlers\n     */\n    private void setupEventHandlers() {\n        // Theme selector\n        themeSelector.setOnAction(e -> {\n            currentTheme = themeSelector.getValue().toLowerCase().replace(\" \", \"-\");\n            applyTheme();\n        });\n        \n        // Copy button\n        copyButton.setOnAction(e -> copyCodeToClipboard());\n        \n        // Wrap toggle button\n        wrapToggleButton.setOnAction(e -> {\n            lineWrapEnabled = !lineWrapEnabled;\n            updateLineWrap();\n        });\n    }\n    \n    /**\n     * Initialize syntax highlighting patterns\n     */\n    private void initializeSyntaxPatterns() {\n        // Java patterns\n        Map<String, Pattern> javaPatterns = new HashMap<>();\n        javaPatterns.put(\"keyword\", Pattern.compile(\"\\\\b(public|private|protected|static|final|class|interface|extends|implements|import|package|if|else|for|while|do|switch|case|default|try|catch|finally|throw|throws|return|new|this|super|null|true|false|void|int|double|float|long|short|byte|char|boolean|String)\\\\b\"));\n        javaPatterns.put(\"string\", Pattern.compile(\"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\"));\n        javaPatterns.put(\"comment\", Pattern.compile(\"//.*$|/\\\\*[\\\\s\\\\S]*?\\\\*/\", Pattern.MULTILINE));\n        javaPatterns.put(\"number\", Pattern.compile(\"\\\\b\\\\d+(\\\\.\\\\d+)?[fFdDlL]?\\\\b\"));\n        javaPatterns.put(\"annotation\", Pattern.compile(\"@\\\\w+\"));\n        syntaxPatterns.put(\"java\", javaPatterns);\n        \n        // Python patterns\n        Map<String, Pattern> pythonPatterns = new HashMap<>();\n        pythonPatterns.put(\"keyword\", Pattern.compile(\"\\\\b(def|class|if|elif|else|for|while|try|except|finally|import|from|as|return|yield|lambda|with|assert|break|continue|pass|global|nonlocal|True|False|None|and|or|not|in|is)\\\\b\"));\n        pythonPatterns.put(\"string\", Pattern.compile(\"\\\"\\\"\\\"[\\\\s\\\\S]*?\\\"\\\"\\\"|'''[\\\\s\\\\S]*?'''|\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|'([^'\\\\\\\\]|\\\\\\\\.)*'\"));\n        pythonPatterns.put(\"comment\", Pattern.compile(\"#.*$\", Pattern.MULTILINE));\n        pythonPatterns.put(\"number\", Pattern.compile(\"\\\\b\\\\d+(\\\\.\\\\d+)?\\\\b\"));\n        pythonPatterns.put(\"decorator\", Pattern.compile(\"@\\\\w+\"));\n        syntaxPatterns.put(\"python\", pythonPatterns);\n        \n        // JavaScript patterns\n        Map<String, Pattern> jsPatterns = new HashMap<>();\n        jsPatterns.put(\"keyword\", Pattern.compile(\"\\\\b(var|let|const|function|if|else|for|while|do|switch|case|default|try|catch|finally|throw|return|new|this|typeof|instanceof|in|of|class|extends|import|export|from|as|default|async|await|yield|true|false|null|undefined)\\\\b\"));\n        jsPatterns.put(\"string\", Pattern.compile(\"`[\\\\s\\\\S]*?`|\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|'([^'\\\\\\\\]|\\\\\\\\.)*'\"));\n        jsPatterns.put(\"comment\", Pattern.compile(\"//.*$|/\\\\*[\\\\s\\\\S]*?\\\\*/\", Pattern.MULTILINE));\n        jsPatterns.put(\"number\", Pattern.compile(\"\\\\b\\\\d+(\\\\.\\\\d+)?\\\\b\"));\n        jsPatterns.put(\"regex\", Pattern.compile(\"/([^/\\\\\\\\]|\\\\\\\\.)+/[gimuy]*\"));\n        syntaxPatterns.put(\"javascript\", jsPatterns);\n        \n        // CSS patterns\n        Map<String, Pattern> cssPatterns = new HashMap<>();\n        cssPatterns.put(\"selector\", Pattern.compile(\"[.#]?[a-zA-Z][a-zA-Z0-9_-]*(?=\\\\s*\\\\{)\"));\n        cssPatterns.put(\"property\", Pattern.compile(\"[a-zA-Z-]+(?=\\\\s*:)\"));\n        cssPatterns.put(\"value\", Pattern.compile(\"(?<=:\\\\s)[^;]+\"));\n        cssPatterns.put(\"string\", Pattern.compile(\"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|'([^'\\\\\\\\]|\\\\\\\\.)*'\"));\n        cssPatterns.put(\"comment\", Pattern.compile(\"/\\\\*[\\\\s\\\\S]*?\\\\*/\"));\n        syntaxPatterns.put(\"css\", cssPatterns);\n        \n        // HTML patterns\n        Map<String, Pattern> htmlPatterns = new HashMap<>();\n        htmlPatterns.put(\"tag\", Pattern.compile(\"</?[a-zA-Z][a-zA-Z0-9]*(?:\\\\s[^>]*)?>\")); \n        htmlPatterns.put(\"attribute\", Pattern.compile(\"\\\\s[a-zA-Z-]+(?==)\"));\n        htmlPatterns.put(\"string\", Pattern.compile(\"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"|'([^'\\\\\\\\]|\\\\\\\\.)*'\"));\n        htmlPatterns.put(\"comment\", Pattern.compile(\"<!--[\\\\s\\\\S]*?-->\"));\n        syntaxPatterns.put(\"html\", htmlPatterns);\n        \n        // JSON patterns\n        Map<String, Pattern> jsonPatterns = new HashMap<>();\n        jsonPatterns.put(\"key\", Pattern.compile(\"\\\"[^\\\"]*\\\"(?=\\\\s*:)\"));\n        jsonPatterns.put(\"string\", Pattern.compile(\"\\\"([^\\\"\\\\\\\\]|\\\\\\\\.)*\\\"\"));\n        jsonPatterns.put(\"number\", Pattern.compile(\"\\\\b-?\\\\d+(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?\\\\b\"));\n        jsonPatterns.put(\"boolean\", Pattern.compile(\"\\\\b(true|false|null)\\\\b\"));\n        syntaxPatterns.put(\"json\", jsonPatterns);\n    }\n    \n    /**\n     * Load and display a code file\n     */\n    public void loadFile(File file) {\n        if (file == null || !file.exists() || !file.isFile()) {\n            showError(\"Invalid file\");\n            return;\n        }\n        \n        currentFile = file;\n        currentLanguage = detectLanguage(file);\n        \n        // Update UI\n        fileNameLabel.setText(file.getName());\n        languageLabel.setText(currentLanguage.toUpperCase());\n        \n        // Show loading\n        showLoading(\"Loading file...\");\n        \n        // Load file content in background\n        Task<List<String>> loadTask = new Task<List<String>>() {\n            @Override\n            protected List<String> call() throws Exception {\n                List<String> lines = new ArrayList<>();\n                try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        lines.add(line);\n                    }\n                } catch (IOException e) {\n                    throw new RuntimeException(\"Failed to read file: \" + e.getMessage());\n                }\n                return lines;\n            }\n            \n            @Override\n            protected void succeeded() {\n                Platform.runLater(() -> {\n                    codeLines = getValue();\n                    displayCode();\n                    hideLoading();\n                    statusLabel.setText(\"Loaded \" + codeLines.size() + \" lines\");\n                });\n            }\n            \n            @Override\n            protected void failed() {\n                Platform.runLater(() -> {\n                    showError(\"Failed to load file: \" + getException().getMessage());\n                    hideLoading();\n                });\n            }\n        };\n        \n        Thread loadThread = new Thread(loadTask);\n        loadThread.setDaemon(true);\n        loadThread.start();\n    }\n    \n    /**\n     * Display the loaded code with syntax highlighting\n     */\n    private void displayCode() {\n        // Clear existing content\n        codeTextFlow.getChildren().clear();\n        lineNumbersPane.getChildren().clear();\n        \n        if (codeLines.isEmpty()) {\n            Text emptyText = new Text(\"File is empty\");\n            emptyText.getStyleClass().add(\"code-empty-text\");\n            codeTextFlow.getChildren().add(emptyText);\n            return;\n        }\n        \n        // Add line numbers and code\n        for (int i = 0; i < codeLines.size(); i++) {\n            // Line number\n            if (showLineNumbers) {\n                Label lineNumber = new Label(String.valueOf(i + 1));\n                lineNumber.getStyleClass().add(\"line-number\");\n                lineNumber.setPrefWidth(40);\n                lineNumber.setAlignment(Pos.CENTER_RIGHT);\n                lineNumbersPane.getChildren().add(lineNumber);\n            }\n            \n            // Code line with syntax highlighting\n            String line = codeLines.get(i);\n            List<Text> highlightedLine = applySyntaxHighlighting(line, currentLanguage);\n            \n            // Add line content\n            codeTextFlow.getChildren().addAll(highlightedLine);\n            \n            // Add line break (except for last line)\n            if (i < codeLines.size() - 1) {\n                Text lineBreak = new Text(\"\\n\");\n                codeTextFlow.getChildren().add(lineBreak);\n            }\n        }\n        \n        applyTheme();\n    }\n    \n    /**\n     * Apply syntax highlighting to a line of code\n     */\n    private List<Text> applySyntaxHighlighting(String line, String language) {\n        List<Text> result = new ArrayList<>();\n        \n        if (!syntaxPatterns.containsKey(language)) {\n            // No syntax highlighting available, return plain text\n            Text plainText = new Text(line);\n            plainText.getStyleClass().add(\"code-text\");\n            result.add(plainText);\n            return result;\n        }\n        \n        Map<String, Pattern> patterns = syntaxPatterns.get(language);\n        List<HighlightMatch> matches = new ArrayList<>();\n        \n        // Find all matches\n        for (Map.Entry<String, Pattern> entry : patterns.entrySet()) {\n            String type = entry.getKey();\n            Pattern pattern = entry.getValue();\n            Matcher matcher = pattern.matcher(line);\n            \n            while (matcher.find()) {\n                matches.add(new HighlightMatch(matcher.start(), matcher.end(), type));\n            }\n        }\n        \n        // Sort matches by start position\n        matches.sort(Comparator.comparingInt(m -> m.start));\n        \n        // Build highlighted text\n        int lastEnd = 0;\n        for (HighlightMatch match : matches) {\n            // Add text before match\n            if (match.start > lastEnd) {\n                Text beforeText = new Text(line.substring(lastEnd, match.start));\n                beforeText.getStyleClass().add(\"code-text\");\n                result.add(beforeText);\n            }\n            \n            // Add highlighted match\n            Text matchText = new Text(line.substring(match.start, match.end));\n            matchText.getStyleClass().addAll(\"code-text\", \"code-\" + match.type);\n            result.add(matchText);\n            \n            lastEnd = Math.max(lastEnd, match.end);\n        }\n        \n        // Add remaining text\n        if (lastEnd < line.length()) {\n            Text remainingText = new Text(line.substring(lastEnd));\n            remainingText.getStyleClass().add(\"code-text\");\n            result.add(remainingText);\n        }\n        \n        return result;\n    }\n    \n    /**\n     * Detect programming language from file extension\n     */\n    private String detectLanguage(File file) {\n        String fileName = file.getName().toLowerCase();\n        \n        if (fileName.endsWith(\".java\")) return \"java\";\n        if (fileName.endsWith(\".py\")) return \"python\";\n        if (fileName.endsWith(\".js\") || fileName.endsWith(\".jsx\")) return \"javascript\";\n        if (fileName.endsWith(\".ts\") || fileName.endsWith(\".tsx\")) return \"javascript\";\n        if (fileName.endsWith(\".css\")) return \"css\";\n        if (fileName.endsWith(\".html\") || fileName.endsWith(\".htm\")) return \"html\";\n        if (fileName.endsWith(\".json\")) return \"json\";\n        if (fileName.endsWith(\".xml\")) return \"html\";\n        if (fileName.endsWith(\".cpp\") || fileName.endsWith(\".c\") || fileName.endsWith(\".h\")) return \"java\"; // Similar to Java\n        \n        return \"text\"; // Default to plain text\n    }\n    \n    /**\n     * Apply the selected theme\n     */\n    private void applyTheme() {\n        // Remove existing theme classes\n        this.getStyleClass().removeIf(cls -> cls.startsWith(\"theme-\"));\n        \n        // Add new theme class\n        this.getStyleClass().add(\"theme-\" + currentTheme);\n    }\n    \n    /**\n     * Update line wrap setting\n     */\n    private void updateLineWrap() {\n        if (lineWrapEnabled) {\n            codeTextFlow.getStyleClass().add(\"line-wrap-enabled\");\n            wrapToggleButton.setTooltip(new Tooltip(\"Disable line wrap\"));\n        } else {\n            codeTextFlow.getStyleClass().remove(\"line-wrap-enabled\");\n            wrapToggleButton.setTooltip(new Tooltip(\"Enable line wrap\"));\n        }\n    }\n    \n    /**\n     * Copy code content to clipboard\n     */\n    private void copyCodeToClipboard() {\n        if (codeLines.isEmpty()) {\n            return;\n        }\n        \n        StringBuilder content = new StringBuilder();\n        for (String line : codeLines) {\n            content.append(line).append(\"\\n\");\n        }\n        \n        // Copy to system clipboard\n        javafx.scene.input.Clipboard clipboard = javafx.scene.input.Clipboard.getSystemClipboard();\n        javafx.scene.input.ClipboardContent clipboardContent = new javafx.scene.input.ClipboardContent();\n        clipboardContent.putString(content.toString());\n        clipboard.setContent(clipboardContent);\n        \n        // Show feedback\n        statusLabel.setText(\"Code copied to clipboard\");\n        \n        // Reset status after delay\n        Platform.runLater(() -> {\n            new Thread(() -> {\n                try {\n                    Thread.sleep(2000);\n                    Platform.runLater(() -> statusLabel.setText(\"Ready\"));\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }).start();\n        });\n    }\n    \n    /**\n     * Show loading indicator\n     */\n    private void showLoading(String message) {\n        statusLabel.setText(message);\n        loadingIndicator.setVisible(true);\n    }\n    \n    /**\n     * Hide loading indicator\n     */\n    private void hideLoading() {\n        loadingIndicator.setVisible(false);\n    }\n    \n    /**\n     * Show error message\n     */\n    private void showError(String message) {\n        statusLabel.setText(\"Error: \" + message);\n        codeTextFlow.getChildren().clear();\n        lineNumbersPane.getChildren().clear();\n        \n        Text errorText = new Text(\"Error loading file: \" + message);\n        errorText.getStyleClass().add(\"code-error-text\");\n        codeTextFlow.getChildren().add(errorText);\n    }\n    \n    // Getters and Setters\n    \n    public void setShowLineNumbers(boolean show) {\n        this.showLineNumbers = show;\n        if (currentFile != null) {\n            displayCode();\n        }\n    }\n    \n    public boolean isShowLineNumbers() {\n        return showLineNumbers;\n    }\n    \n    public void setLineWrapEnabled(boolean enabled) {\n        this.lineWrapEnabled = enabled;\n        updateLineWrap();\n    }\n    \n    public boolean isLineWrapEnabled() {\n        return lineWrapEnabled;\n    }\n    \n    public String getCurrentLanguage() {\n        return currentLanguage;\n    }\n    \n    public File getCurrentFile() {\n        return currentFile;\n    }\n    \n    /**\n     * Helper class for syntax highlighting matches\n     */\n    private static class HighlightMatch {\n        final int start;\n        final int end;\n        final String type;\n        \n        HighlightMatch(int start, int end, String type) {\n            this.start = start;\n            this.end = end;\n            this.type = type;\n        }\n    }\n}"