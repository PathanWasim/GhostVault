package com.ghostvault.ui.components;

import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyCodeCombination;
import javafx.scene.input.KeyCombination;

import java.io.File;
import java.util.List;
import java.util.function.Consumer;

/**
 * Context menu manager for file operations
 */
public class FileContextMenuManager {
    
    private ModernFileOperations fileOperations;
    private Consumer<File> onFileOpen;
    private Consumer<File> onFilePreview;
    private Consumer<List<File>> onFilesDelete;
    private Consumer<File> onFileRename;
    private Consumer<File> onFileProperties;
    private Runnable onRefresh;
    
    public FileContextMenuManager(ModernFileOperations fileOperations) {\n        this.fileOperations = fileOperations;\n    }\n    \n    /**\n     * Create context menu for a single file\n     */\n    public ContextMenu createFileContextMenu(File file) {\n        ContextMenu contextMenu = new ContextMenu();\n        \n        // Open/Preview\n        MenuItem openItem = new MenuItem(\"Open\");\n        openItem.setOnAction(e -> {\n            if (onFileOpen != null) {\n                onFileOpen.accept(file);\n            }\n        });\n        openItem.setAccelerator(new KeyCodeCombination(KeyCode.ENTER));\n        \n        MenuItem previewItem = new MenuItem(\"Preview\");\n        previewItem.setOnAction(e -> {\n            if (onFilePreview != null) {\n                onFilePreview.accept(file);\n            }\n        });\n        previewItem.setAccelerator(new KeyCodeCombination(KeyCode.SPACE));\n        \n        // Separator\n        SeparatorMenuItem separator1 = new SeparatorMenuItem();\n        \n        // File operations\n        MenuItem downloadItem = new MenuItem(\"Download...\");\n        downloadItem.setOnAction(e -> downloadFile(file));\n        downloadItem.setAccelerator(new KeyCodeCombination(KeyCode.S, KeyCombination.CONTROL_DOWN));\n        \n        MenuItem renameItem = new MenuItem(\"Rename...\");\n        renameItem.setOnAction(e -> {\n            if (onFileRename != null) {\n                onFileRename.accept(file);\n            }\n        });\n        renameItem.setAccelerator(new KeyCodeCombination(KeyCode.F2));\n        \n        MenuItem deleteItem = new MenuItem(\"Delete\");\n        deleteItem.setOnAction(e -> {\n            if (onFilesDelete != null) {\n                onFilesDelete.accept(List.of(file));\n            }\n        });\n        deleteItem.setAccelerator(new KeyCodeCombination(KeyCode.DELETE));\n        deleteItem.getStyleClass().add(\"danger-menu-item\");\n        \n        // Separator\n        SeparatorMenuItem separator2 = new SeparatorMenuItem();\n        \n        // Properties\n        MenuItem propertiesItem = new MenuItem(\"Properties...\");\n        propertiesItem.setOnAction(e -> {\n            if (onFileProperties != null) {\n                onFileProperties.accept(file);\n            }\n        });\n        propertiesItem.setAccelerator(new KeyCodeCombination(KeyCode.ENTER, KeyCombination.ALT_DOWN));\n        \n        // Add items to menu\n        contextMenu.getItems().addAll(\n            openItem, previewItem,\n            separator1,\n            downloadItem, renameItem, deleteItem,\n            separator2,\n            propertiesItem\n        );\n        \n        // Disable items based on file type\n        if (file.isDirectory()) {\n            previewItem.setDisable(true);\n            downloadItem.setText(\"Export Folder...\");\n        }\n        \n        return contextMenu;\n    }\n    \n    /**\n     * Create context menu for multiple selected files\n     */\n    public ContextMenu createMultiFileContextMenu(List<File> files) {\n        ContextMenu contextMenu = new ContextMenu();\n        \n        int fileCount = files.size();\n        \n        // Bulk operations\n        MenuItem downloadAllItem = new MenuItem(\"Download All (\" + fileCount + \")...\");\n        downloadAllItem.setOnAction(e -> downloadMultipleFiles(files));\n        \n        MenuItem deleteAllItem = new MenuItem(\"Delete All (\" + fileCount + \")\");\n        deleteAllItem.setOnAction(e -> {\n            if (onFilesDelete != null) {\n                onFilesDelete.accept(files);\n            }\n        });\n        deleteAllItem.getStyleClass().add(\"danger-menu-item\");\n        \n        // Separator\n        SeparatorMenuItem separator = new SeparatorMenuItem();\n        \n        // Selection operations\n        MenuItem deselectAllItem = new MenuItem(\"Deselect All\");\n        deselectAllItem.setOnAction(e -> {\n            // This would be handled by the file manager\n        });\n        \n        contextMenu.getItems().addAll(\n            downloadAllItem, deleteAllItem,\n            separator,\n            deselectAllItem\n        );\n        \n        return contextMenu;\n    }\n    \n    /**\n     * Create context menu for empty space (no files selected)\n     */\n    public ContextMenu createEmptySpaceContextMenu() {\n        ContextMenu contextMenu = new ContextMenu();\n        \n        // Upload operations\n        MenuItem uploadFilesItem = new MenuItem(\"Upload Files...\");\n        uploadFilesItem.setOnAction(e -> uploadFiles());\n        uploadFilesItem.setAccelerator(new KeyCodeCombination(KeyCode.U, KeyCombination.CONTROL_DOWN));\n        \n        MenuItem uploadFolderItem = new MenuItem(\"Upload Folder...\");\n        uploadFolderItem.setOnAction(e -> uploadFolder());\n        \n        // Separator\n        SeparatorMenuItem separator1 = new SeparatorMenuItem();\n        \n        // New operations\n        MenuItem newFolderItem = new MenuItem(\"New Folder...\");\n        newFolderItem.setOnAction(e -> createNewFolder());\n        newFolderItem.setAccelerator(new KeyCodeCombination(KeyCode.N, KeyCombination.CONTROL_DOWN, KeyCombination.SHIFT_DOWN));\n        \n        // Separator\n        SeparatorMenuItem separator2 = new SeparatorMenuItem();\n        \n        // View operations\n        MenuItem refreshItem = new MenuItem(\"Refresh\");\n        refreshItem.setOnAction(e -> {\n            if (onRefresh != null) {\n                onRefresh.run();\n            }\n        });\n        refreshItem.setAccelerator(new KeyCodeCombination(KeyCode.F5));\n        \n        MenuItem selectAllItem = new MenuItem(\"Select All\");\n        selectAllItem.setOnAction(e -> {\n            // This would be handled by the file manager\n        });\n        selectAllItem.setAccelerator(new KeyCodeCombination(KeyCode.A, KeyCombination.CONTROL_DOWN));\n        \n        contextMenu.getItems().addAll(\n            uploadFilesItem, uploadFolderItem,\n            separator1,\n            newFolderItem,\n            separator2,\n            refreshItem, selectAllItem\n        );\n        \n        return contextMenu;\n    }\n    \n    /**\n     * Create context menu for directory/folder\n     */\n    public ContextMenu createDirectoryContextMenu(File directory) {\n        ContextMenu contextMenu = new ContextMenu();\n        \n        // Open operations\n        MenuItem openItem = new MenuItem(\"Open\");\n        openItem.setOnAction(e -> {\n            if (onFileOpen != null) {\n                onFileOpen.accept(directory);\n            }\n        });\n        \n        MenuItem openInNewWindowItem = new MenuItem(\"Open in New Window\");\n        openInNewWindowItem.setOnAction(e -> {\n            // This would open the directory in a new window\n        });\n        \n        // Separator\n        SeparatorMenuItem separator1 = new SeparatorMenuItem();\n        \n        // Directory operations\n        MenuItem exportItem = new MenuItem(\"Export Folder...\");\n        exportItem.setOnAction(e -> exportDirectory(directory));\n        \n        MenuItem renameItem = new MenuItem(\"Rename...\");\n        renameItem.setOnAction(e -> {\n            if (onFileRename != null) {\n                onFileRename.accept(directory);\n            }\n        });\n        \n        MenuItem deleteItem = new MenuItem(\"Delete Folder\");\n        deleteItem.setOnAction(e -> {\n            if (onFilesDelete != null) {\n                onFilesDelete.accept(List.of(directory));\n            }\n        });\n        deleteItem.getStyleClass().add(\"danger-menu-item\");\n        \n        // Separator\n        SeparatorMenuItem separator2 = new SeparatorMenuItem();\n        \n        // Properties\n        MenuItem propertiesItem = new MenuItem(\"Properties...\");\n        propertiesItem.setOnAction(e -> {\n            if (onFileProperties != null) {\n                onFileProperties.accept(directory);\n            }\n        });\n        \n        contextMenu.getItems().addAll(\n            openItem, openInNewWindowItem,\n            separator1,\n            exportItem, renameItem, deleteItem,\n            separator2,\n            propertiesItem\n        );\n        \n        return contextMenu;\n    }\n    \n    private void downloadFile(File file) {\n        String extension = getFileExtension(file);\n        fileOperations.showFileSaveDialog(file.getName(), extension)\n            .thenAccept(targetFile -> {\n                if (targetFile != null) {\n                    fileOperations.downloadFile(file, targetFile, success -> {\n                        // Download completion handled by ModernFileOperations\n                    });\n                }\n            });\n    }\n    \n    private void downloadMultipleFiles(List<File> files) {\n        fileOperations.showDirectoryChooser(\"Select Download Location\")\n            .thenAccept(targetDirectory -> {\n                if (targetDirectory != null) {\n                    // Download each file to the target directory\n                    for (File file : files) {\n                        File targetFile = new File(targetDirectory, file.getName());\n                        fileOperations.downloadFile(file, targetFile, success -> {\n                            // Individual file download completion\n                        });\n                    }\n                }\n            });\n    }\n    \n    private void uploadFiles() {\n        fileOperations.showFileUploadDialog()\n            .thenAccept(selectedFiles -> {\n                if (!selectedFiles.isEmpty()) {\n                    // This would need the target directory from the current context\n                    // For now, we'll show a notification\n                    NotificationSystem.showInfo(\"Upload\", \n                        \"Selected \" + selectedFiles.size() + \" files for upload\");\n                }\n            });\n    }\n    \n    private void uploadFolder() {\n        fileOperations.showDirectoryChooser(\"Select Folder to Upload\")\n            .thenAccept(selectedDirectory -> {\n                if (selectedDirectory != null) {\n                    NotificationSystem.showInfo(\"Upload Folder\", \n                        \"Selected folder: \" + selectedDirectory.getName());\n                }\n            });\n    }\n    \n    private void createNewFolder() {\n        TextInputDialog dialog = new TextInputDialog(\"New Folder\");\n        dialog.setTitle(\"Create New Folder\");\n        dialog.setHeaderText(\"Enter folder name:\");\n        dialog.setContentText(\"Name:\");\n        \n        dialog.showAndWait().ifPresent(folderName -> {\n            if (!folderName.trim().isEmpty()) {\n                // This would create the folder in the current directory\n                NotificationSystem.showInfo(\"New Folder\", \n                    \"Creating folder: \" + folderName);\n            }\n        });\n    }\n    \n    private void exportDirectory(File directory) {\n        fileOperations.showDirectoryChooser(\"Select Export Location\")\n            .thenAccept(targetDirectory -> {\n                if (targetDirectory != null) {\n                    NotificationSystem.showInfo(\"Export Folder\", \n                        \"Exporting \" + directory.getName() + \" to \" + targetDirectory.getName());\n                }\n            });\n    }\n    \n    private String getFileExtension(File file) {\n        String name = file.getName();\n        int lastDot = name.lastIndexOf('.');\n        return lastDot > 0 ? name.substring(lastDot + 1) : \"\";\n    }\n    \n    // Setters for event handlers\n    public void setOnFileOpen(Consumer<File> onFileOpen) {\n        this.onFileOpen = onFileOpen;\n    }\n    \n    public void setOnFilePreview(Consumer<File> onFilePreview) {\n        this.onFilePreview = onFilePreview;\n    }\n    \n    public void setOnFilesDelete(Consumer<List<File>> onFilesDelete) {\n        this.onFilesDelete = onFilesDelete;\n    }\n    \n    public void setOnFileRename(Consumer<File> onFileRename) {\n        this.onFileRename = onFileRename;\n    }\n    \n    public void setOnFileProperties(Consumer<File> onFileProperties) {\n        this.onFileProperties = onFileProperties;\n    }\n    \n    public void setOnRefresh(Runnable onRefresh) {\n        this.onRefresh = onRefresh;\n    }\n}"