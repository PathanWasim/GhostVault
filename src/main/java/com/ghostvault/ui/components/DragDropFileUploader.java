package com.ghostvault.ui.components;

import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.input.*;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

/**
 * Drag and drop file upload functionality
 */
public class DragDropFileUploader {
    
    private Consumer<List<File>> onFilesDropped;\n    private Consumer<DragEvent> onDragEntered;\n    private Consumer<DragEvent> onDragExited;\n    private boolean allowDirectories = true;\n    private List<String> allowedExtensions = new ArrayList<>();\n    \n    /**\n     * Enable drag and drop on a node\n     */\n    public void enableDragAndDrop(Node node) {\n        // Set up drag over handler\n        node.setOnDragOver(event -> {\n            if (event.getGestureSource() != node && event.getDragboard().hasFiles()) {\n                List<File> files = event.getDragboard().getFiles();\n                if (areFilesAcceptable(files)) {\n                    event.acceptTransferModes(TransferMode.COPY);\n                }\n            }\n            event.consume();\n        });\n        \n        // Set up drag entered handler\n        node.setOnDragEntered(event -> {\n            if (event.getGestureSource() != node && event.getDragboard().hasFiles()) {\n                List<File> files = event.getDragboard().getFiles();\n                if (areFilesAcceptable(files)) {\n                    addDragOverEffect(node);\n                    if (onDragEntered != null) {\n                        onDragEntered.accept(event);\n                    }\n                }\n            }\n            event.consume();\n        });\n        \n        // Set up drag exited handler\n        node.setOnDragExited(event -> {\n            removeDragOverEffect(node);\n            if (onDragExited != null) {\n                onDragExited.accept(event);\n            }\n            event.consume();\n        });\n        \n        // Set up drag dropped handler\n        node.setOnDragDropped(event -> {\n            Dragboard dragboard = event.getDragboard();\n            boolean success = false;\n            \n            if (dragboard.hasFiles()) {\n                List<File> files = dragboard.getFiles();\n                if (areFilesAcceptable(files)) {\n                    if (onFilesDropped != null) {\n                        onFilesDropped.accept(files);\n                    }\n                    success = true;\n                }\n            }\n            \n            event.setDropCompleted(success);\n            removeDragOverEffect(node);\n            event.consume();\n        });\n    }\n    \n    /**\n     * Create a dedicated drop zone component\n     */\n    public VBox createDropZone() {\n        VBox dropZone = new VBox(20);\n        dropZone.setAlignment(Pos.CENTER);\n        dropZone.setPadding(new Insets(40));\n        dropZone.setPrefHeight(200);\n        dropZone.getStyleClass().add(\"drag-drop-zone\");\n        \n        // Drop zone icon (using text for now)\n        Label iconLabel = new Label(\"📁\");\n        iconLabel.setFont(Font.font(48));\n        iconLabel.getStyleClass().add(\"drop-zone-icon\");\n        \n        // Main message\n        Label mainLabel = new Label(\"Drag and drop files here\");\n        mainLabel.setFont(Font.font(mainLabel.getFont().getFamily(), FontWeight.BOLD, 16));\n        mainLabel.getStyleClass().add(\"drop-zone-main-text\");\n        \n        // Secondary message\n        Label secondaryLabel = new Label(\"or click to browse\");\n        secondaryLabel.setFont(Font.font(12));\n        secondaryLabel.getStyleClass().add(\"drop-zone-secondary-text\");\n        \n        dropZone.getChildren().addAll(iconLabel, mainLabel, secondaryLabel);\n        \n        // Enable drag and drop\n        enableDragAndDrop(dropZone);\n        \n        // Add click handler for file browsing\n        dropZone.setOnMouseClicked(event -> {\n            if (event.getClickCount() == 1) {\n                // This would trigger file chooser dialog\n                NotificationSystem.showInfo(\"File Browser\", \"Opening file browser...\");\n            }\n        });\n        \n        // Style the drop zone\n        dropZone.setStyle(\n            \"-fx-border-color: #ddd; \" +\n            \"-fx-border-width: 2px; \" +\n            \"-fx-border-style: dashed; \" +\n            \"-fx-border-radius: 8px; \" +\n            \"-fx-background-color: #fafafa; \" +\n            \"-fx-cursor: hand;\"\n        );\n        \n        return dropZone;\n    }\n    \n    /**\n     * Create a compact drop zone for smaller areas\n     */\n    public HBox createCompactDropZone() {\n        HBox dropZone = new HBox(10);\n        dropZone.setAlignment(Pos.CENTER);\n        dropZone.setPadding(new Insets(15));\n        dropZone.getStyleClass().add(\"compact-drag-drop-zone\");\n        \n        Label iconLabel = new Label(\"📎\");\n        iconLabel.setFont(Font.font(16));\n        \n        Label textLabel = new Label(\"Drop files here or click to browse\");\n        textLabel.setFont(Font.font(12));\n        \n        dropZone.getChildren().addAll(iconLabel, textLabel);\n        \n        // Enable drag and drop\n        enableDragAndDrop(dropZone);\n        \n        // Add click handler\n        dropZone.setOnMouseClicked(event -> {\n            NotificationSystem.showInfo(\"File Browser\", \"Opening file browser...\");\n        });\n        \n        // Style\n        dropZone.setStyle(\n            \"-fx-border-color: #ccc; \" +\n            \"-fx-border-width: 1px; \" +\n            \"-fx-border-style: dashed; \" +\n            \"-fx-border-radius: 4px; \" +\n            \"-fx-background-color: #f8f8f8; \" +\n            \"-fx-cursor: hand;\"\n        );\n        \n        return dropZone;\n    }\n    \n    /**\n     * Add visual feedback when files are dragged over\n     */\n    private void addDragOverEffect(Node node) {\n        if (node instanceof Region) {\n            Region region = (Region) node;\n            \n            // Store original style\n            String originalStyle = region.getStyle();\n            region.getProperties().put(\"original-style\", originalStyle);\n            \n            // Add drag over style\n            String dragOverStyle = originalStyle + \n                \"; -fx-border-color: #4CAF50\" +\n                \"; -fx-border-width: 3px\" +\n                \"; -fx-background-color: rgba(76, 175, 80, 0.1)\" +\n                \"; -fx-border-style: solid\";\n            \n            region.setStyle(dragOverStyle);\n        }\n    }\n    \n    /**\n     * Remove visual feedback when drag exits\n     */\n    private void removeDragOverEffect(Node node) {\n        if (node instanceof Region) {\n            Region region = (Region) node;\n            \n            // Restore original style\n            String originalStyle = (String) region.getProperties().get(\"original-style\");\n            if (originalStyle != null) {\n                region.setStyle(originalStyle);\n            }\n        }\n    }\n    \n    /**\n     * Check if the dropped files are acceptable\n     */\n    private boolean areFilesAcceptable(List<File> files) {\n        if (files == null || files.isEmpty()) {\n            return false;\n        }\n        \n        for (File file : files) {\n            // Check if directories are allowed\n            if (file.isDirectory() && !allowDirectories) {\n                return false;\n            }\n            \n            // Check file extensions if specified\n            if (!allowedExtensions.isEmpty() && file.isFile()) {\n                String extension = getFileExtension(file).toLowerCase();\n                if (!allowedExtensions.contains(extension)) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n    \n    /**\n     * Get file extension\n     */\n    private String getFileExtension(File file) {\n        String name = file.getName();\n        int lastDot = name.lastIndexOf('.');\n        return lastDot > 0 ? name.substring(lastDot + 1) : \"\";\n    }\n    \n    /**\n     * Show upload progress overlay\n     */\n    public VBox createUploadProgressOverlay() {\n        VBox overlay = new VBox(15);\n        overlay.setAlignment(Pos.CENTER);\n        overlay.setPadding(new Insets(30));\n        overlay.getStyleClass().add(\"upload-progress-overlay\");\n        \n        Label iconLabel = new Label(\"⬆\");\n        iconLabel.setFont(Font.font(36));\n        iconLabel.setTextFill(Color.BLUE);\n        \n        Label messageLabel = new Label(\"Uploading files...\");\n        messageLabel.setFont(Font.font(messageLabel.getFont().getFamily(), FontWeight.BOLD, 14));\n        \n        ProgressBar progressBar = new ProgressBar();\n        progressBar.setPrefWidth(200);\n        \n        Label progressLabel = new Label(\"0% complete\");\n        progressLabel.setFont(Font.font(12));\n        \n        overlay.getChildren().addAll(iconLabel, messageLabel, progressBar, progressLabel);\n        \n        // Style the overlay\n        overlay.setStyle(\n            \"-fx-background-color: rgba(255, 255, 255, 0.95); \" +\n            \"-fx-border-color: #ddd; \" +\n            \"-fx-border-width: 1px; \" +\n            \"-fx-border-radius: 8px; \" +\n            \"-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.2), 10, 0, 0, 2);\"\n        );\n        \n        return overlay;\n    }\n    \n    /**\n     * Create file validation message\n     */\n    public Label createValidationMessage(String message, boolean isError) {\n        Label validationLabel = new Label(message);\n        validationLabel.setFont(Font.font(12));\n        \n        if (isError) {\n            validationLabel.setTextFill(Color.RED);\n            validationLabel.setText(\"❌ \" + message);\n        } else {\n            validationLabel.setTextFill(Color.GREEN);\n            validationLabel.setText(\"✅ \" + message);\n        }\n        \n        return validationLabel;\n    }\n    \n    // Configuration methods\n    public void setOnFilesDropped(Consumer<List<File>> onFilesDropped) {\n        this.onFilesDropped = onFilesDropped;\n    }\n    \n    public void setOnDragEntered(Consumer<DragEvent> onDragEntered) {\n        this.onDragEntered = onDragEntered;\n    }\n    \n    public void setOnDragExited(Consumer<DragEvent> onDragExited) {\n        this.onDragExited = onDragExited;\n    }\n    \n    public void setAllowDirectories(boolean allowDirectories) {\n        this.allowDirectories = allowDirectories;\n    }\n    \n    public void setAllowedExtensions(List<String> allowedExtensions) {\n        this.allowedExtensions = new ArrayList<>(allowedExtensions);\n    }\n    \n    public void addAllowedExtension(String extension) {\n        if (!allowedExtensions.contains(extension.toLowerCase())) {\n            allowedExtensions.add(extension.toLowerCase());\n        }\n    }\n    \n    public void clearAllowedExtensions() {\n        allowedExtensions.clear();\n    }\n    \n    /**\n     * Utility method to format file size for display\n     */\n    public static String formatFileSize(long bytes) {\n        if (bytes < 1024) return bytes + \" B\";\n        if (bytes < 1024 * 1024) return String.format(\"%.1f KB\", bytes / 1024.0);\n        if (bytes < 1024 * 1024 * 1024) return String.format(\"%.1f MB\", bytes / (1024.0 * 1024.0));\n        return String.format(\"%.1f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n    }\n    \n    /**\n     * Utility method to get file count description\n     */\n    public static String getFileCountDescription(List<File> files) {\n        if (files == null || files.isEmpty()) {\n            return \"No files\";\n        }\n        \n        long totalSize = files.stream().mapToLong(File::length).sum();\n        int fileCount = (int) files.stream().filter(File::isFile).count();\n        int folderCount = (int) files.stream().filter(File::isDirectory).count();\n        \n        StringBuilder description = new StringBuilder();\n        \n        if (fileCount > 0) {\n            description.append(fileCount).append(\" file\");\n            if (fileCount > 1) description.append(\"s\");\n        }\n        \n        if (folderCount > 0) {\n            if (description.length() > 0) description.append(\", \");\n            description.append(folderCount).append(\" folder\");\n            if (folderCount > 1) description.append(\"s\");\n        }\n        \n        if (totalSize > 0) {\n            description.append(\" (\").append(formatFileSize(totalSize)).append(\")\");\n        }\n        \n        return description.toString();\n    }\n}"