package com.ghostvault.ui;

import com.ghostvault.ui.controllers.InitialSetupController;\nimport javafx.application.Platform;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.junit.jupiter.api.*;\nimport org.testfx.framework.junit5.ApplicationTest;\nimport org.testfx.util.WaitForAsyncUtils;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.testfx.api.FxAssert.verifyThat;\nimport static org.testfx.matcher.control.LabeledMatchers.hasText;\nimport static org.testfx.matcher.base.NodeMatchers.isVisible;\n\n/**\n * UI tests for the registration flow (InitialSetupController)\n * Tests single password entry, validation, and user experience\n */\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class RegistrationFlowUITest extends ApplicationTest {\n    \n    private InitialSetupController setupController;\n    private Stage testStage;\n    private Path tempVaultDir;\n    \n    @BeforeAll\n    static void setupHeadless() {\n        System.setProperty(\"testfx.robot\", \"glass\");\n        System.setProperty(\"testfx.headless\", \"true\");\n        System.setProperty(\"java.awt.headless\", \"true\");\n        System.setProperty(\"prism.order\", \"sw\");\n        System.setProperty(\"prism.text\", \"t2k\");\n    }\n    \n    @BeforeEach\n    void setUp() throws Exception {\n        tempVaultDir = Files.createTempDirectory(\"ghostvault-registration-test\");\n        System.setProperty(\"user.home\", tempVaultDir.getParent().toString());\n        \n        Platform.runLater(() -> {\n            try {\n                testStage = new Stage();\n                \n                // Create test setup UI similar to InitialSetupController\n                VBox root = createTestSetupUI();\n                Scene testScene = new Scene(root, 500, 650);\n                \n                // Apply theme\n                com.ghostvault.ui.theme.PasswordManagerTheme.applyPasswordManagerTheme(testScene);\n                \n                testStage.setScene(testScene);\n                testStage.setTitle(\"GhostVault Setup Test\");\n                testStage.show();\n                \n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        \n        WaitForAsyncUtils.waitForFxEvents();\n    }\n    \n    @AfterEach\n    void tearDown() throws Exception {\n        Platform.runLater(() -> {\n            if (testStage != null) {\n                testStage.close();\n            }\n        });\n        \n        if (tempVaultDir != null && Files.exists(tempVaultDir)) {\n            Files.walk(tempVaultDir)\n                .map(Path::toFile)\n                .forEach(File::delete);\n        }\n        \n        WaitForAsyncUtils.waitForFxEvents();\n    }\n    \n    /**\n     * Create test setup UI similar to InitialSetupController\n     */\n    private VBox createTestSetupUI() {\n        VBox root = new VBox(12);\n        root.setPadding(new javafx.geometry.Insets(20));\n        root.setAlignment(javafx.geometry.Pos.CENTER);\n        root.setId(\"setupContainer\");\n        \n        // Header\n        Label titleLabel = new Label(\"🔒 GhostVault Setup\");\n        titleLabel.setId(\"titleLabel\");\n        titleLabel.setStyle(\"-fx-font-size: 24px; -fx-font-weight: bold;\");\n        \n        Label subtitleLabel = new Label(\"Configure your three security passwords - no confirmation required\");\n        subtitleLabel.setId(\"subtitleLabel\");\n        subtitleLabel.setStyle(\"-fx-font-size: 14px;\");\n        \n        Label warningLabel = new Label(\"⚠️ Remember all passwords - they cannot be recovered\");\n        warningLabel.setId(\"warningLabel\");\n        warningLabel.setStyle(\"-fx-font-size: 12px; -fx-text-fill: #F59E0B;\");\n        \n        // Password sections\n        VBox passwordSections = new VBox(15);\n        passwordSections.setAlignment(javafx.geometry.Pos.CENTER);\n        \n        // Master Password Section\n        VBox masterSection = createPasswordSection(\n            \"Master Password\",\n            \"Full access to your secure vault with all features and real files\",\n            \"#4CAF50\",\n            \"masterPassword\"\n        );\n        \n        // Panic Password Section\n        VBox panicSection = createPasswordSection(\n            \"Panic Password\",\n            \"Emergency mode - securely wipes all data if entered under duress\",\n            \"#f44336\",\n            \"panicPassword\"\n        );\n        \n        // Decoy Password Section\n        VBox decoySection = createPasswordSection(\n            \"Decoy Password\",\n            \"Shows a fake vault with dummy files to protect your real data\",\n            \"#ff9800\",\n            \"decoyPassword\"\n        );\n        \n        passwordSections.getChildren().addAll(masterSection, panicSection, decoySection);\n        \n        // Action buttons\n        javafx.scene.layout.HBox buttonBox = new javafx.scene.layout.HBox(12);\n        buttonBox.setAlignment(javafx.geometry.Pos.CENTER);\n        \n        Button cancelButton = new Button(\"Cancel\");\n        cancelButton.setId(\"cancelButton\");\n        cancelButton.getStyleClass().add(\"secondary\");\n        \n        Button setupButton = new Button(\"Complete Setup\");\n        setupButton.setId(\"setupButton\");\n        setupButton.getStyleClass().add(\"primary\");\n        \n        buttonBox.getChildren().addAll(cancelButton, setupButton);\n        \n        root.getChildren().addAll(\n            titleLabel,\n            subtitleLabel,\n            warningLabel,\n            passwordSections,\n            buttonBox\n        );\n        \n        return root;\n    }\n    \n    /**\n     * Create a password section with field and strength indicator\n     */\n    private VBox createPasswordSection(String title, String description, String accentColor, String fieldId) {\n        VBox section = new VBox(6);\n        section.setAlignment(javafx.geometry.Pos.CENTER_LEFT);\n        section.setPadding(new javafx.geometry.Insets(12));\n        section.setId(fieldId + \"Section\");\n        \n        Label titleLabel = new Label(title);\n        titleLabel.setId(fieldId + \"Title\");\n        titleLabel.setStyle(\"-fx-font-size: 16px; -fx-font-weight: 600;\");\n        \n        Label descLabel = new Label(description);\n        descLabel.setId(fieldId + \"Description\");\n        descLabel.setStyle(\"-fx-font-size: 13px;\");\n        descLabel.setWrapText(true);\n        descLabel.setMaxWidth(380);\n        \n        // Single password field - no confirmation needed\n        PasswordField passwordField = new PasswordField();\n        passwordField.setId(fieldId + \"Field\");\n        passwordField.setPromptText(\"Enter \" + title.toLowerCase());\n        passwordField.setPrefWidth(380);\n        passwordField.setPrefHeight(35);\n        \n        // Password strength indicator\n        ProgressBar strengthBar = new ProgressBar(0);\n        strengthBar.setId(fieldId + \"StrengthBar\");\n        strengthBar.setPrefWidth(380);\n        strengthBar.setPrefHeight(6);\n        \n        Label strengthLabel = new Label(\"Password strength: Weak\");\n        strengthLabel.setId(fieldId + \"StrengthLabel\");\n        strengthLabel.setStyle(\"-fx-font-size: 12px;\");\n        \n        // Add password strength validation\n        passwordField.textProperty().addListener((obs, oldText, newText) -> {\n            double strength = calculatePasswordStrength(newText);\n            strengthBar.setProgress(strength);\n            \n            String strengthText;\n            if (strength < 0.3) {\n                strengthText = \"Password strength: Weak\";\n            } else if (strength < 0.7) {\n                strengthText = \"Password strength: Medium\";\n            } else {\n                strengthText = \"Password strength: Strong\";\n            }\n            \n            strengthLabel.setText(strengthText);\n        });\n        \n        section.getChildren().addAll(titleLabel, descLabel, passwordField, strengthBar, strengthLabel);\n        return section;\n    }\n    \n    /**\n     * Calculate password strength (simplified version)\n     */\n    private double calculatePasswordStrength(String password) {\n        if (password == null || password.isEmpty()) return 0.0;\n        \n        int score = 0;\n        \n        if (password.length() >= 8) score += 25;\n        if (password.length() >= 12) score += 25;\n        if (password.matches(\".*[a-z].*\")) score += 10;\n        if (password.matches(\".*[A-Z].*\")) score += 10;\n        if (password.matches(\".*[0-9].*\")) score += 15;\n        if (password.matches(\".*[!@#$%^&*()_+\\\\-=\\\\[\\\\]{};':\"\\\\\\\\|,.<>\\\\/?].*\")) score += 15;\n        \n        return Math.min(score / 100.0, 1.0);\n    }\n    \n    @Test\n    @Order(1)\n    @DisplayName(\"Setup UI Components Should Be Visible\")\n    void testSetupUIVisibility() {\n        verifyThat(\"#titleLabel\", isVisible());\n        verifyThat(\"#subtitleLabel\", isVisible());\n        verifyThat(\"#warningLabel\", isVisible());\n        verifyThat(\"#masterPasswordSection\", isVisible());\n        verifyThat(\"#panicPasswordSection\", isVisible());\n        verifyThat(\"#decoyPasswordSection\", isVisible());\n        verifyThat(\"#cancelButton\", isVisible());\n        verifyThat(\"#setupButton\", isVisible());\n        \n        System.out.println(\"✅ All setup UI components are visible\");\n    }\n    \n    @Test\n    @Order(2)\n    @DisplayName(\"Setup Title and Instructions Should Be Clear\")\n    void testSetupInstructions() {\n        verifyThat(\"#titleLabel\", hasText(\"🔒 GhostVault Setup\"));\n        verifyThat(\"#subtitleLabel\", hasText(\"Configure your three security passwords - no confirmation required\"));\n        verifyThat(\"#warningLabel\", hasText(\"⚠️ Remember all passwords - they cannot be recovered\"));\n        \n        System.out.println(\"✅ Setup instructions are clear and informative\");\n    }\n    \n    @Test\n    @Order(3)\n    @DisplayName(\"Password Sections Should Have Proper Labels\")\n    void testPasswordSectionLabels() {\n        verifyThat(\"#masterPasswordTitle\", hasText(\"Master Password\"));\n        verifyThat(\"#panicPasswordTitle\", hasText(\"Panic Password\"));\n        verifyThat(\"#decoyPasswordTitle\", hasText(\"Decoy Password\"));\n        \n        // Test descriptions are present\n        Label masterDesc = lookup(\"#masterPasswordDescription\").query();\n        Label panicDesc = lookup(\"#panicPasswordDescription\").query();\n        Label decoyDesc = lookup(\"#decoyPasswordDescription\").query();\n        \n        assertTrue(masterDesc.getText().contains(\"Full access\"), \"Master password description should explain full access\");\n        assertTrue(panicDesc.getText().contains(\"Emergency mode\"), \"Panic password description should explain emergency mode\");\n        assertTrue(decoyDesc.getText().contains(\"fake vault\"), \"Decoy password description should explain fake vault\");\n        \n        System.out.println(\"✅ Password sections have proper labels and descriptions\");\n    }\n    \n    @Test\n    @Order(4)\n    @DisplayName(\"Password Fields Should Accept Single Entry\")\n    void testSinglePasswordEntry() {\n        PasswordField masterField = lookup(\"#masterPasswordField\").query();\n        PasswordField panicField = lookup(\"#panicPasswordField\").query();\n        PasswordField decoyField = lookup(\"#decoyPasswordField\").query();\n        \n        // Test that fields accept input\n        Platform.runLater(() -> {\n            masterField.setText(\"TestMaster123!\");\n            panicField.setText(\"TestPanic456@\");\n            decoyField.setText(\"TestDecoy789#\");\n        });\n        \n        WaitForAsyncUtils.waitForFxEvents();\n        \n        assertEquals(\"TestMaster123!\", masterField.getText(), \"Master password field should accept input\");\n        assertEquals(\"TestPanic456@\", panicField.getText(), \"Panic password field should accept input\");\n        assertEquals(\"TestDecoy789#\", decoyField.getText(), \"Decoy password field should accept input\");\n        \n        System.out.println(\"✅ Password fields accept single entry without confirmation\");\n    }\n    \n    @Test\n    @Order(5)\n    @DisplayName(\"Password Strength Should Update in Real-Time\")\n    void testPasswordStrengthValidation() {\n        PasswordField masterField = lookup(\"#masterPasswordField\").query();\n        ProgressBar strengthBar = lookup(\"#masterPasswordStrengthBar\").query();\n        Label strengthLabel = lookup(\"#masterPasswordStrengthLabel\").query();\n        \n        // Test weak password\n        Platform.runLater(() -> {\n            masterField.setText(\"123\");\n        });\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        assertTrue(strengthBar.getProgress() < 0.3, \"Weak password should have low strength score\");\n        assertTrue(strengthLabel.getText().contains(\"Weak\"), \"Strength label should show 'Weak'\");\n        \n        // Test strong password\n        Platform.runLater(() -> {\n            masterField.setText(\"StrongPassword123!\");\n        });\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        assertTrue(strengthBar.getProgress() > 0.7, \"Strong password should have high strength score\");\n        assertTrue(strengthLabel.getText().contains(\"Strong\"), \"Strength label should show 'Strong'\");\n        \n        System.out.println(\"✅ Password strength updates in real-time\");\n    }\n    \n    @Test\n    @Order(6)\n    @DisplayName(\"Password Fields Should Have Helpful Prompts\")\n    void testPasswordFieldPrompts() {\n        PasswordField masterField = lookup(\"#masterPasswordField\").query();\n        PasswordField panicField = lookup(\"#panicPasswordField\").query();\n        PasswordField decoyField = lookup(\"#decoyPasswordField\").query();\n        \n        assertEquals(\"Enter master password\", masterField.getPromptText(), \"Master field should have helpful prompt\");\n        assertEquals(\"Enter panic password\", panicField.getPromptText(), \"Panic field should have helpful prompt\");\n        assertEquals(\"Enter decoy password\", decoyField.getPromptText(), \"Decoy field should have helpful prompt\");\n        \n        System.out.println(\"✅ Password fields have helpful prompt text\");\n    }\n    \n    @Test\n    @Order(7)\n    @DisplayName(\"Action Buttons Should Be Properly Styled\")\n    void testActionButtonStyling() {\n        Button cancelButton = lookup(\"#cancelButton\").query();\n        Button setupButton = lookup(\"#setupButton\").query();\n        \n        assertTrue(cancelButton.getStyleClass().contains(\"secondary\"), \"Cancel button should have secondary styling\");\n        assertTrue(setupButton.getStyleClass().contains(\"primary\"), \"Setup button should have primary styling\");\n        \n        verifyThat(\"#cancelButton\", hasText(\"Cancel\"));\n        verifyThat(\"#setupButton\", hasText(\"Complete Setup\"));\n        \n        System.out.println(\"✅ Action buttons are properly styled\");\n    }\n    \n    @Test\n    @Order(8)\n    @DisplayName(\"Setup Flow Should Be User-Friendly\")\n    void testUserFriendlySetupFlow() {\n        // Test that all password sections are clearly separated\n        VBox masterSection = lookup(\"#masterPasswordSection\").query();\n        VBox panicSection = lookup(\"#panicPasswordSection\").query();\n        VBox decoySection = lookup(\"#decoyPasswordSection\").query();\n        \n        assertNotNull(masterSection, \"Master password section should exist\");\n        assertNotNull(panicSection, \"Panic password section should exist\");\n        assertNotNull(decoySection, \"Decoy password section should exist\");\n        \n        // Test that sections have proper spacing\n        assertTrue(masterSection.getSpacing() > 0, \"Master section should have proper spacing\");\n        assertTrue(panicSection.getSpacing() > 0, \"Panic section should have proper spacing\");\n        assertTrue(decoySection.getSpacing() > 0, \"Decoy section should have proper spacing\");\n        \n        System.out.println(\"✅ Setup flow is user-friendly with clear sections\");\n    }\n    \n    @Test\n    @Order(9)\n    @DisplayName(\"Password Strength Indicators Should Be Visible\")\n    void testPasswordStrengthIndicators() {\n        verifyThat(\"#masterPasswordStrengthBar\", isVisible());\n        verifyThat(\"#panicPasswordStrengthBar\", isVisible());\n        verifyThat(\"#decoyPasswordStrengthBar\", isVisible());\n        \n        verifyThat(\"#masterPasswordStrengthLabel\", isVisible());\n        verifyThat(\"#panicPasswordStrengthLabel\", isVisible());\n        verifyThat(\"#decoyPasswordStrengthLabel\", isVisible());\n        \n        System.out.println(\"✅ Password strength indicators are visible\");\n    }\n    \n    @Test\n    @Order(10)\n    @DisplayName(\"Complete Registration Flow Should Work\")\n    void testCompleteRegistrationFlow() {\n        // Fill in all password fields\n        Platform.runLater(() -> {\n            PasswordField masterField = lookup(\"#masterPasswordField\").query();\n            PasswordField panicField = lookup(\"#panicPasswordField\").query();\n            PasswordField decoyField = lookup(\"#decoyPasswordField\").query();\n            \n            masterField.setText(\"SecureMaster123!\");\n            panicField.setText(\"EmergencyPanic456@\");\n            decoyField.setText(\"FakeDecoy789#\");\n        });\n        \n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Verify all fields have content\n        PasswordField masterField = lookup(\"#masterPasswordField\").query();\n        PasswordField panicField = lookup(\"#panicPasswordField\").query();\n        PasswordField decoyField = lookup(\"#decoyPasswordField\").query();\n        \n        assertFalse(masterField.getText().isEmpty(), \"Master password should be filled\");\n        assertFalse(panicField.getText().isEmpty(), \"Panic password should be filled\");\n        assertFalse(decoyField.getText().isEmpty(), \"Decoy password should be filled\");\n        \n        // Test that setup button is clickable\n        Button setupButton = lookup(\"#setupButton\").query();\n        assertDoesNotThrow(() -> {\n            Platform.runLater(() -> setupButton.fire());\n            WaitForAsyncUtils.waitForFxEvents();\n        }, \"Setup button should be clickable\");\n        \n        System.out.println(\"✅ Complete registration flow works correctly\");\n    }\n    \n    @Override\n    public void start(Stage stage) throws Exception {\n        // Required by ApplicationTest\n    }\n}"