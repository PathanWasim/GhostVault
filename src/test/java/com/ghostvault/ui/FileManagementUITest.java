package com.ghostvault.ui;\n\nimport javafx.application.Platform;\nimport javafx.scene.Scene;\nimport javafx.scene.control.*;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport org.junit.jupiter.api.*;\nimport org.testfx.framework.junit5.ApplicationTest;\nimport org.testfx.util.WaitForAsyncUtils;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n\nimport static org.junit.jupiter.api.Assertions.*;\nimport static org.testfx.api.FxAssert.verifyThat;\nimport static org.testfx.matcher.control.LabeledMatchers.hasText;\nimport static org.testfx.matcher.base.NodeMatchers.isVisible;\n\n/**\n * UI tests for file management functionality\n * Tests file upload, download, error handling, and progress indicators\n */\n@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\npublic class FileManagementUITest extends ApplicationTest {\n    \n    private Stage testStage;\n    private Path tempVaultDir;\n    \n    @BeforeAll\n    static void setupHeadless() {\n        System.setProperty(\"testfx.robot\", \"glass\");\n        System.setProperty(\"testfx.headless\", \"true\");\n        System.setProperty(\"java.awt.headless\", \"true\");\n        System.setProperty(\"prism.order\", \"sw\");\n        System.setProperty(\"prism.text\", \"t2k\");\n    }\n    \n    @BeforeEach\n    void setUp() throws Exception {\n        tempVaultDir = Files.createTempDirectory(\"ghostvault-filemanagement-test\");\n        System.setProperty(\"user.home\", tempVaultDir.getParent().toString());\n        \n        Platform.runLater(() -> {\n            try {\n                testStage = new Stage();\n                \n                VBox root = createFileManagementTestUI();\n                Scene testScene = new Scene(root, 800, 600);\n                \n                com.ghostvault.ui.theme.PasswordManagerTheme.applyPasswordManagerTheme(testScene);\n                \n                testStage.setScene(testScene);\n                testStage.setTitle(\"File Management Test\");\n                testStage.show();\n                \n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        \n        WaitForAsyncUtils.waitForFxEvents();\n    }\n    \n    @AfterEach\n    void tearDown() throws Exception {\n        Platform.runLater(() -> {\n            if (testStage != null) {\n                testStage.close();\n            }\n        });\n        \n        if (tempVaultDir != null && Files.exists(tempVaultDir)) {\n            Files.walk(tempVaultDir)\n                .map(Path::toFile)\n                .forEach(File::delete);\n        }\n        \n        WaitForAsyncUtils.waitForFxEvents();\n    }\n    \n    /**\n     * Create file management test UI\n     */\n    private VBox createFileManagementTestUI() {\n        VBox root = new VBox(15);\n        root.setPadding(new javafx.geometry.Insets(20));\n        root.setId(\"fileManagementRoot\");\n        \n        // Title\n        Label titleLabel = new Label(\"üìÅ File Management Test\");\n        titleLabel.setId(\"titleLabel\");\n        titleLabel.setStyle(\"-fx-font-size: 18px; -fx-font-weight: bold;\");\n        \n        // File operation buttons\n        javafx.scene.layout.HBox operationButtons = new javafx.scene.layout.HBox(10);\n        operationButtons.setId(\"operationButtons\");\n        \n        Button uploadButton = new Button(\"üì§ Upload Files\");\n        uploadButton.setId(\"uploadButton\");\n        uploadButton.getStyleClass().add(\"primary\");\n        \n        Button downloadButton = new Button(\"üì• Download Selected\");\n        downloadButton.setId(\"downloadButton\");\n        downloadButton.getStyleClass().add(\"success\");\n        \n        Button deleteButton = new Button(\"üóëÔ∏è Delete Selected\");\n        deleteButton.setId(\"deleteButton\");\n        deleteButton.getStyleClass().add(\"danger\");\n        \n        Button previewButton = new Button(\"üëÅÔ∏è Preview Selected\");\n        previewButton.setId(\"previewButton\");\n        previewButton.getStyleClass().add(\"secondary\");\n        \n        operationButtons.getChildren().addAll(uploadButton, downloadButton, deleteButton, previewButton);\n        \n        // Progress section\n        VBox progressSection = new VBox(5);\n        progressSection.setId(\"progressSection\");\n        \n        ProgressIndicator operationProgress = new ProgressIndicator();\n        operationProgress.setId(\"operationProgress\");\n        operationProgress.setVisible(false);\n        operationProgress.setPrefSize(50, 50);\n        \n        Label operationStatusLabel = new Label(\"\");\n        operationStatusLabel.setId(\"operationStatusLabel\");\n        operationStatusLabel.setStyle(\"-fx-font-size: 14px; -fx-font-weight: 500;\");\n        \n        progressSection.getChildren().addAll(operationProgress, operationStatusLabel);\n        \n        // File list\n        ListView<String> fileListView = new ListView<>();\n        fileListView.setId(\"fileListView\");\n        fileListView.setPrefHeight(200);\n        \n        // Add test files\n        fileListView.getItems().addAll(\n            \"üìÑ Important_Document.pdf (2.3 MB)\",\n            \"üñºÔ∏è Family_Photo.jpg (1.8 MB)\",\n            \"üìä Financial_Report.xlsx (856 KB)\",\n            \"üéµ Favorite_Song.mp3 (4.2 MB)\",\n            \"üé¨ Presentation.mp4 (15.7 MB)\"\n        );\n        \n        // Status and error display\n        VBox statusSection = new VBox(5);\n        statusSection.setId(\"statusSection\");\n        \n        javafx.scene.layout.HBox statusLabels = new javafx.scene.layout.HBox(20);\n        statusLabels.setId(\"statusLabels\");\n        \n        Label fileCountLabel = new Label(\"Files: 5\");\n        fileCountLabel.setId(\"fileCountLabel\");\n        \n        Label totalSizeLabel = new Label(\"Total Size: 24.9 MB\");\n        totalSizeLabel.setId(\"totalSizeLabel\");\n        \n        Label encryptionStatusLabel = new Label(\"üîê Encrypted: AES-256-GCM\");\n        encryptionStatusLabel.setId(\"encryptionStatusLabel\");\n        encryptionStatusLabel.getStyleClass().add(\"success\");\n        \n        statusLabels.getChildren().addAll(fileCountLabel, totalSizeLabel, encryptionStatusLabel);\n        \n        // Error display area\n        TextArea errorDisplayArea = new TextArea();\n        errorDisplayArea.setId(\"errorDisplayArea\");\n        errorDisplayArea.setPrefHeight(80);\n        errorDisplayArea.setEditable(false);\n        errorDisplayArea.setVisible(false);\n        errorDisplayArea.setStyle(\"-fx-text-fill: #EF4444; -fx-control-inner-background: #FEF2F2;\");\n        \n        statusSection.getChildren().addAll(statusLabels, errorDisplayArea);\n        \n        // Activity log\n        TextArea activityLog = new TextArea();\n        activityLog.setId(\"activityLog\");\n        activityLog.setPrefHeight(120);\n        activityLog.setEditable(false);\n        activityLog.setText(\n            \"‚úÖ File management system initialized\\n\" +\n            \"üìÅ Vault loaded with 5 encrypted files\\n\" +\n            \"üîê Encryption engine active (AES-256-GCM)\\n\" +\n            \"‚ö° Ready for file operations\"\n        );\n        \n        // Add button event handlers for testing\n        setupButtonHandlers(uploadButton, downloadButton, deleteButton, previewButton, \n                           operationProgress, operationStatusLabel, errorDisplayArea, \n                           activityLog, fileListView);\n        \n        root.getChildren().addAll(\n            titleLabel,\n            new Separator(),\n            operationButtons,\n            progressSection,\n            fileListView,\n            statusSection,\n            new Label(\"Activity Log:\"),\n            activityLog\n        );\n        \n        return root;\n    }\n    \n    /**\n     * Setup button handlers for testing file operations\n     */\n    private void setupButtonHandlers(Button uploadButton, Button downloadButton, Button deleteButton, \n                                   Button previewButton, ProgressIndicator operationProgress, \n                                   Label operationStatusLabel, TextArea errorDisplayArea, \n                                   TextArea activityLog, ListView<String> fileListView) {\n        \n        uploadButton.setOnAction(e -> {\n            simulateFileUpload(operationProgress, operationStatusLabel, activityLog);\n        });\n        \n        downloadButton.setOnAction(e -> {\n            String selectedFile = fileListView.getSelectionModel().getSelectedItem();\n            if (selectedFile != null) {\n                simulateFileDownload(selectedFile, operationProgress, operationStatusLabel, activityLog);\n            } else {\n                showError(\"No file selected for download\", errorDisplayArea, activityLog);\n            }\n        });\n        \n        deleteButton.setOnAction(e -> {\n            String selectedFile = fileListView.getSelectionModel().getSelectedItem();\n            if (selectedFile != null) {\n                simulateFileDelete(selectedFile, operationProgress, operationStatusLabel, activityLog, fileListView);\n            } else {\n                showError(\"No file selected for deletion\", errorDisplayArea, activityLog);\n            }\n        });\n        \n        previewButton.setOnAction(e -> {\n            String selectedFile = fileListView.getSelectionModel().getSelectedItem();\n            if (selectedFile != null) {\n                simulateFilePreview(selectedFile, operationProgress, operationStatusLabel, activityLog);\n            } else {\n                showError(\"No file selected for preview\", errorDisplayArea, activityLog);\n            }\n        });\n    }\n    \n    /**\n     * Simulate file upload operation\n     */\n    private void simulateFileUpload(ProgressIndicator progress, Label statusLabel, TextArea activityLog) {\n        progress.setVisible(true);\n        statusLabel.setText(\"Uploading files...\");\n        \n        // Simulate upload process\n        javafx.concurrent.Task<Void> uploadTask = new javafx.concurrent.Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                for (int i = 0; i <= 100; i += 10) {\n                    Thread.sleep(100);\n                    final int progress = i;\n                    Platform.runLater(() -> {\n                        statusLabel.setText(\"Encrypting and uploading... (\" + progress + \"%)\");\n                    });\n                }\n                return null;\n            }\n        };\n        \n        uploadTask.setOnSucceeded(event -> {\n            progress.setVisible(false);\n            statusLabel.setText(\"\");\n            activityLog.appendText(\"\\n‚úÖ File upload completed successfully\");\n            activityLog.appendText(\"\\nüîê Files encrypted with AES-256-GCM\");\n        });\n        \n        uploadTask.setOnFailed(event -> {\n            progress.setVisible(false);\n            statusLabel.setText(\"\");\n            activityLog.appendText(\"\\n‚ùå File upload failed\");\n        });\n        \n        new Thread(uploadTask).start();\n    }\n    \n    /**\n     * Simulate file download operation\n     */\n    private void simulateFileDownload(String fileName, ProgressIndicator progress, Label statusLabel, TextArea activityLog) {\n        progress.setVisible(true);\n        statusLabel.setText(\"Downloading \" + fileName + \"...\");\n        \n        javafx.concurrent.Task<Void> downloadTask = new javafx.concurrent.Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                for (int i = 0; i <= 100; i += 20) {\n                    Thread.sleep(150);\n                    final int progress = i;\n                    Platform.runLater(() -> {\n                        statusLabel.setText(\"Decrypting and downloading... (\" + progress + \"%)\");\n                    });\n                }\n                return null;\n            }\n        };\n        \n        downloadTask.setOnSucceeded(event -> {\n            progress.setVisible(false);\n            statusLabel.setText(\"\");\n            activityLog.appendText(\"\\nüì• Download completed: \" + fileName);\n            activityLog.appendText(\"\\nüîì File decrypted successfully\");\n        });\n        \n        new Thread(downloadTask).start();\n    }\n    \n    /**\n     * Simulate file deletion operation\n     */\n    private void simulateFileDelete(String fileName, ProgressIndicator progress, Label statusLabel, \n                                  TextArea activityLog, ListView<String> fileListView) {\n        progress.setVisible(true);\n        statusLabel.setText(\"Securely deleting \" + fileName + \"...\");\n        \n        javafx.concurrent.Task<Void> deleteTask = new javafx.concurrent.Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                Thread.sleep(800); // Simulate secure deletion\n                return null;\n            }\n        };\n        \n        deleteTask.setOnSucceeded(event -> {\n            progress.setVisible(false);\n            statusLabel.setText(\"\");\n            fileListView.getItems().remove(fileName);\n            activityLog.appendText(\"\\nüóëÔ∏è File securely deleted: \" + fileName);\n            activityLog.appendText(\"\\nüîí Multiple overwrite passes completed\");\n        });\n        \n        new Thread(deleteTask).start();\n    }\n    \n    /**\n     * Simulate file preview operation\n     */\n    private void simulateFilePreview(String fileName, ProgressIndicator progress, Label statusLabel, TextArea activityLog) {\n        progress.setVisible(true);\n        statusLabel.setText(\"Loading preview for \" + fileName + \"...\");\n        \n        javafx.concurrent.Task<Void> previewTask = new javafx.concurrent.Task<Void>() {\n            @Override\n            protected Void call() throws Exception {\n                Thread.sleep(500);\n                return null;\n            }\n        };\n        \n        previewTask.setOnSucceeded(event -> {\n            progress.setVisible(false);\n            statusLabel.setText(\"\");\n            activityLog.appendText(\"\\nüëÅÔ∏è Preview loaded: \" + fileName);\n            activityLog.appendText(\"\\nüîì File temporarily decrypted for preview\");\n        });\n        \n        new Thread(previewTask).start();\n    }\n    \n    /**\n     * Show error message\n     */\n    private void showError(String errorMessage, TextArea errorDisplayArea, TextArea activityLog) {\n        errorDisplayArea.setText(\"‚ùå Error: \" + errorMessage);\n        errorDisplayArea.setVisible(true);\n        activityLog.appendText(\"\\n‚ùå \" + errorMessage);\n        \n        // Hide error after 3 seconds\n        javafx.animation.PauseTransition pause = new javafx.animation.PauseTransition(javafx.util.Duration.seconds(3));\n        pause.setOnFinished(e -> errorDisplayArea.setVisible(false));\n        pause.play();\n    }\n    \n    @Test\n    @Order(1)\n    @DisplayName(\"File Management UI Should Be Visible\")\n    void testFileManagementUIVisibility() {\n        verifyThat(\"#titleLabel\", isVisible());\n        verifyThat(\"#operationButtons\", isVisible());\n        verifyThat(\"#uploadButton\", isVisible());\n        verifyThat(\"#downloadButton\", isVisible());\n        verifyThat(\"#deleteButton\", isVisible());\n        verifyThat(\"#previewButton\", isVisible());\n        verifyThat(\"#fileListView\", isVisible());\n        verifyThat(\"#statusLabels\", isVisible());\n        verifyThat(\"#activityLog\", isVisible());\n        \n        System.out.println(\"‚úÖ File management UI components are visible\");\n    }\n    \n    @Test\n    @Order(2)\n    @DisplayName(\"File Operation Buttons Should Have Correct Styling\")\n    void testFileOperationButtonStyling() {\n        Button uploadButton = lookup(\"#uploadButton\").query();\n        Button downloadButton = lookup(\"#downloadButton\").query();\n        Button deleteButton = lookup(\"#deleteButton\").query();\n        Button previewButton = lookup(\"#previewButton\").query();\n        \n        assertTrue(uploadButton.getStyleClass().contains(\"primary\"), \"Upload button should have primary styling\");\n        assertTrue(downloadButton.getStyleClass().contains(\"success\"), \"Download button should have success styling\");\n        assertTrue(deleteButton.getStyleClass().contains(\"danger\"), \"Delete button should have danger styling\");\n        assertTrue(previewButton.getStyleClass().contains(\"secondary\"), \"Preview button should have secondary styling\");\n        \n        System.out.println(\"‚úÖ File operation buttons have correct styling\");\n    }\n    \n    @Test\n    @Order(3)\n    @DisplayName(\"File List Should Display Files\")\n    void testFileListDisplay() {\n        ListView<String> fileListView = lookup(\"#fileListView\").query();\n        \n        assertFalse(fileListView.getItems().isEmpty(), \"File list should not be empty\");\n        assertEquals(5, fileListView.getItems().size(), \"File list should have 5 test files\");\n        \n        // Test file format\n        assertTrue(fileListView.getItems().get(0).contains(\"üìÑ\"), \"First file should have document icon\");\n        assertTrue(fileListView.getItems().get(1).contains(\"üñºÔ∏è\"), \"Second file should have image icon\");\n        assertTrue(fileListView.getItems().get(0).contains(\"MB\"), \"File should show size information\");\n        \n        System.out.println(\"‚úÖ File list displays files with proper formatting\");\n    }\n    \n    @Test\n    @Order(4)\n    @DisplayName(\"Progress Indicator Should Be Hidden Initially\")\n    void testProgressIndicatorInitialState() {\n        ProgressIndicator operationProgress = lookup(\"#operationProgress\").query();\n        Label operationStatusLabel = lookup(\"#operationStatusLabel\").query();\n        \n        assertFalse(operationProgress.isVisible(), \"Progress indicator should be hidden initially\");\n        assertEquals(\"\", operationStatusLabel.getText(), \"Status label should be empty initially\");\n        \n        System.out.println(\"‚úÖ Progress indicator is properly hidden initially\");\n    }\n    \n    @Test\n    @Order(5)\n    @DisplayName(\"Status Labels Should Show Correct Information\")\n    void testStatusLabels() {\n        verifyThat(\"#fileCountLabel\", hasText(\"Files: 5\"));\n        verifyThat(\"#totalSizeLabel\", hasText(\"Total Size: 24.9 MB\"));\n        verifyThat(\"#encryptionStatusLabel\", hasText(\"üîê Encrypted: AES-256-GCM\"));\n        \n        Label encryptionStatusLabel = lookup(\"#encryptionStatusLabel\").query();\n        assertTrue(encryptionStatusLabel.getStyleClass().contains(\"success\"), \"Encryption status should have success styling\");\n        \n        System.out.println(\"‚úÖ Status labels show correct information\");\n    }\n    \n    @Test\n    @Order(6)\n    @DisplayName(\"Activity Log Should Show Initial Messages\")\n    void testActivityLogInitialContent() {\n        TextArea activityLog = lookup(\"#activityLog\").query();\n        \n        assertFalse(activityLog.getText().isEmpty(), \"Activity log should have initial content\");\n        assertTrue(activityLog.getText().contains(\"File management system initialized\"), \"Log should show initialization\");\n        assertTrue(activityLog.getText().contains(\"Vault loaded\"), \"Log should show vault loading\");\n        assertTrue(activityLog.getText().contains(\"Encryption engine active\"), \"Log should show encryption status\");\n        \n        System.out.println(\"‚úÖ Activity log shows proper initial messages\");\n    }\n    \n    @Test\n    @Order(7)\n    @DisplayName(\"File Upload Operation Should Work\")\n    void testFileUploadOperation() throws InterruptedException {\n        Button uploadButton = lookup(\"#uploadButton\").query();\n        ProgressIndicator operationProgress = lookup(\"#operationProgress\").query();\n        Label operationStatusLabel = lookup(\"#operationStatusLabel\").query();\n        \n        // Click upload button\n        Platform.runLater(() -> uploadButton.fire());\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that progress indicator becomes visible\n        assertTrue(operationProgress.isVisible(), \"Progress indicator should be visible during upload\");\n        assertFalse(operationStatusLabel.getText().isEmpty(), \"Status label should show upload progress\");\n        \n        // Wait for upload to complete\n        Thread.sleep(1500);\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that progress indicator is hidden after completion\n        assertFalse(operationProgress.isVisible(), \"Progress indicator should be hidden after upload\");\n        \n        System.out.println(\"‚úÖ File upload operation works correctly\");\n    }\n    \n    @Test\n    @Order(8)\n    @DisplayName(\"File Download Should Require Selection\")\n    void testFileDownloadRequiresSelection() {\n        Button downloadButton = lookup(\"#downloadButton\").query();\n        TextArea errorDisplayArea = lookup(\"#errorDisplayArea\").query();\n        \n        // Try download without selection\n        Platform.runLater(() -> downloadButton.fire());\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that error is displayed\n        assertTrue(errorDisplayArea.isVisible(), \"Error display should be visible when no file is selected\");\n        assertTrue(errorDisplayArea.getText().contains(\"No file selected\"), \"Error should indicate no file selected\");\n        \n        System.out.println(\"‚úÖ File download properly requires file selection\");\n    }\n    \n    @Test\n    @Order(9)\n    @DisplayName(\"File Download Should Work With Selection\")\n    void testFileDownloadWithSelection() throws InterruptedException {\n        ListView<String> fileListView = lookup(\"#fileListView\").query();\n        Button downloadButton = lookup(\"#downloadButton\").query();\n        ProgressIndicator operationProgress = lookup(\"#operationProgress\").query();\n        \n        // Select a file\n        Platform.runLater(() -> {\n            fileListView.getSelectionModel().select(0);\n            downloadButton.fire();\n        });\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that download starts\n        assertTrue(operationProgress.isVisible(), \"Progress indicator should be visible during download\");\n        \n        // Wait for download to complete\n        Thread.sleep(1000);\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        System.out.println(\"‚úÖ File download works with proper file selection\");\n    }\n    \n    @Test\n    @Order(10)\n    @DisplayName(\"File Deletion Should Work\")\n    void testFileDeletion() throws InterruptedException {\n        ListView<String> fileListView = lookup(\"#fileListView\").query();\n        Button deleteButton = lookup(\"#deleteButton\").query();\n        \n        int initialFileCount = fileListView.getItems().size();\n        String fileToDelete = fileListView.getItems().get(0);\n        \n        // Select and delete a file\n        Platform.runLater(() -> {\n            fileListView.getSelectionModel().select(0);\n            deleteButton.fire();\n        });\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Wait for deletion to complete\n        Thread.sleep(1000);\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that file was removed from list\n        assertEquals(initialFileCount - 1, fileListView.getItems().size(), \"File count should decrease after deletion\");\n        assertFalse(fileListView.getItems().contains(fileToDelete), \"Deleted file should not be in the list\");\n        \n        System.out.println(\"‚úÖ File deletion works correctly\");\n    }\n    \n    @Test\n    @Order(11)\n    @DisplayName(\"File Preview Should Work\")\n    void testFilePreview() throws InterruptedException {\n        ListView<String> fileListView = lookup(\"#fileListView\").query();\n        Button previewButton = lookup(\"#previewButton\").query();\n        ProgressIndicator operationProgress = lookup(\"#operationProgress\").query();\n        TextArea activityLog = lookup(\"#activityLog\").query();\n        \n        String initialLogContent = activityLog.getText();\n        \n        // Select and preview a file\n        Platform.runLater(() -> {\n            fileListView.getSelectionModel().select(1); // Select image file\n            previewButton.fire();\n        });\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that preview starts\n        assertTrue(operationProgress.isVisible(), \"Progress indicator should be visible during preview\");\n        \n        // Wait for preview to complete\n        Thread.sleep(700);\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that preview completed\n        assertNotEquals(initialLogContent, activityLog.getText(), \"Activity log should be updated after preview\");\n        assertTrue(activityLog.getText().contains(\"Preview loaded\"), \"Log should show preview completion\");\n        \n        System.out.println(\"‚úÖ File preview works correctly\");\n    }\n    \n    @Test\n    @Order(12)\n    @DisplayName(\"Error Display Should Auto-Hide\")\n    void testErrorDisplayAutoHide() throws InterruptedException {\n        Button downloadButton = lookup(\"#downloadButton\").query();\n        TextArea errorDisplayArea = lookup(\"#errorDisplayArea\").query();\n        \n        // Trigger error by trying to download without selection\n        Platform.runLater(() -> downloadButton.fire());\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that error is visible\n        assertTrue(errorDisplayArea.isVisible(), \"Error should be visible initially\");\n        \n        // Wait for auto-hide\n        Thread.sleep(3500);\n        WaitForAsyncUtils.waitForFxEvents();\n        \n        // Check that error is hidden\n        assertFalse(errorDisplayArea.isVisible(), \"Error should auto-hide after timeout\");\n        \n        System.out.println(\"‚úÖ Error display auto-hides correctly\");\n    }\n    \n    @Override\n    public void start(Stage stage) throws Exception {\n        // Required by ApplicationTest\n    }\n}"